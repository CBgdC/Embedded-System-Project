
ProiectFinalSOA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000776c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa4  08007aa4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aac  08007aac  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  20000060  08007b14  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c6c  08007b14  00024c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019179  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000386f  00000000  00000000  0003924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001128  00000000  00000000  0003e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004332  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019216  00000000  00000000  00043522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b07  00000000  00000000  0005c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061ec  00000000  00000000  00100240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078f4 	.word	0x080078f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080078f4 	.word	0x080078f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fdc8 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f85e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f972 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 800059c:	f000 f950 	bl	8000840 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f924 	bl	80007ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8c2 	bl	800072c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a8:	f003 fc7a 	bl	8003ea0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0x88>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	2010      	movs	r0, #16
 80005b2:	f003 fdae 	bl	8004112 <osMessageQueueNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <main+0x8c>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <main+0x90>)
 80005be:	2102      	movs	r1, #2
 80005c0:	2010      	movs	r0, #16
 80005c2:	f003 fda6 	bl	8004112 <osMessageQueueNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <main+0x94>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <main+0x98>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0x9c>)
 80005d2:	f003 fcaf 	bl	8003f34 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <main+0xa0>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0xa4>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4814      	ldr	r0, [pc, #80]	; (8000634 <main+0xa8>)
 80005e2:	f003 fca7 	bl	8003f34 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <main+0xac>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <main+0xb0>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0xb4>)
 80005f2:	f003 fc9f 	bl	8003f34 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <main+0xb8>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <main+0xbc>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0xc0>)
 8000602:	f003 fc97 	bl	8003f34 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <main+0xc4>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f003 fc6c 	bl	8003ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x84>
 8000612:	bf00      	nop
 8000614:	08007a20 	.word	0x08007a20
 8000618:	2000017c 	.word	0x2000017c
 800061c:	08007a38 	.word	0x08007a38
 8000620:	20000180 	.word	0x20000180
 8000624:	08007990 	.word	0x08007990
 8000628:	080009c5 	.word	0x080009c5
 800062c:	2000016c 	.word	0x2000016c
 8000630:	080079b4 	.word	0x080079b4
 8000634:	08000a6d 	.word	0x08000a6d
 8000638:	20000170 	.word	0x20000170
 800063c:	080079d8 	.word	0x080079d8
 8000640:	08000b2d 	.word	0x08000b2d
 8000644:	20000174 	.word	0x20000174
 8000648:	080079fc 	.word	0x080079fc
 800064c:	08000b8d 	.word	0x08000b8d
 8000650:	20000178 	.word	0x20000178

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fcc2 	bl	8006fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd4>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f88e 	bl	8002800 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 faf9 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 faf0 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f000 fae3 	bl	8000ce0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <MX_ADC1_Init+0xb8>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_ADC1_Init+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC1_Init+0xb4>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC1_Init+0xb4>)
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_ADC1_Init+0xbc>)
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ADC1_Init+0xb4>)
 800077a:	2202      	movs	r2, #2
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_ADC1_Init+0xb4>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_ADC1_Init+0xb4>)
 800078e:	f000 fd0b 	bl	80011a8 <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 faa2 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_ADC1_Init+0xb4>)
 80007ae:	f000 ff75 	bl	800169c <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 fa92 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0xb4>)
 80007ca:	f000 ff67 	bl	800169c <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d4:	f000 fa84 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40012000 	.word	0x40012000
 80007e8:	0f000001 	.word	0x0f000001

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f002 ff36 	bl	8003694 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 fa57 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000128 	.word	0x20000128
 800083c:	40004400 	.word	0x40004400

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x3c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x3c>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x3c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2105      	movs	r1, #5
 8000866:	2038      	movs	r0, #56	; 0x38
 8000868:	f001 fa7a 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800086c:	2038      	movs	r0, #56	; 0x38
 800086e:	f001 fa93 	bl	8001d98 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_GPIO_Init+0xe4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a31      	ldr	r2, [pc, #196]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_GPIO_Init+0xe4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0xe8>)
 800090e:	f001 ff45 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000918:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_GPIO_Init+0xec>)
 800092a:	f001 fdb3 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800092e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_GPIO_Init+0xe8>)
 8000948:	f001 fda4 	bl	8002494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2105      	movs	r1, #5
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f001 fa05 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f001 fa1e 	bl	8001d98 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020800 	.word	0x40020800

08000970 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//FUNCTIA PENTRU GESTIONAREA INTRERUPERILOR
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
//VERIFICA DACA PINUL CARE A DECLANSAT INTRERUPEREA ESTE B1_Pin
	if(GPIO_Pin == B1_Pin){
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d114      	bne.n	80009ac <HAL_GPIO_EXTI_Callback+0x3c>
		//VERIFICA VAR 'MOD'
				if(mod == AUTOMAT){
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d108      	bne.n	800099c <HAL_GPIO_EXTI_Callback+0x2c>
					//DACA 'MOD' ESTE IN STAREA 'AUTOMAT' O SCHIMBA IN 'MANUAL'
					mod = MANUAL;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4c>)
 800098c:	2201      	movs	r2, #1
 800098e:	801a      	strh	r2, [r3, #0]
					//APRINDE LEDUL INTEGRAT
					HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000996:	f001 ff01 	bl	800279c <HAL_GPIO_WritePin>
 800099a:	e007      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x3c>

				}
				else {
					//DACA 'MOD' ESTE IN 'MANUAL' O SCHIMBA IN 'AUTOMAT'
					mod = AUTOMAT;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
					//STINGE LEDUL INTEGRAT
					HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x50>)
 80009a8:	f001 fef8 	bl	800279c <HAL_GPIO_WritePin>
				}
	}
	osDelay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f003 fb95 	bl	80040dc <osDelay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000007c 	.word	0x2000007c
 80009c0:	40020000 	.word	0x40020000

080009c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//SE SUSPENDA TASK UL 4
	osThreadSuspend(myTask04Handle);
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <StartDefaultTask+0x88>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fb41 	bl	8004058 <osThreadSuspend>
	//SE DEFINESTE UN ARRAY PENTRU A STOVA VALORILE CITITE DE LA ADC
	uint16_t valADC[2];
	/* Infinite loop */
	for (;;) {
		//VERIFICA DACA MODUL ESTE 'AUTOMAT'
		if (mod == AUTOMAT) {
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <StartDefaultTask+0x8c>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d120      	bne.n	8000a20 <StartDefaultTask+0x5c>
			//SE INCEPE CONVERSIA ADC UTILIZAND DMA
			HAL_ADC_Start_DMA(&hadc1, (uint16_t*) valADC, 2);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2202      	movs	r2, #2
 80009e4:	4619      	mov	r1, r3
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <StartDefaultTask+0x90>)
 80009e8:	f000 fd32 	bl	8001450 <HAL_ADC_Start_DMA>
			//CITESTE VALOAREA ADC IN VAR 'valADC[0]'
			valADC[0] = HAL_ADC_GetValue(&hadc1);
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <StartDefaultTask+0x90>)
 80009ee:	f000 fe1f 	bl	8001630 <HAL_ADC_GetValue>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	81bb      	strh	r3, [r7, #12]
			//PUNE VALOAREA CITITA IN 2 COZI
			osMessageQueuePut(myQueue01Handle, &valADC[0], 1, 10);
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <StartDefaultTask+0x94>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f107 010c 	add.w	r1, r7, #12
 8000a00:	230a      	movs	r3, #10
 8000a02:	2201      	movs	r2, #1
 8000a04:	f003 fbf8 	bl	80041f8 <osMessageQueuePut>
			osMessageQueuePut(myQueue02Handle, &valADC[0], 1, 10);
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <StartDefaultTask+0x98>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	230a      	movs	r3, #10
 8000a12:	2201      	movs	r2, #1
 8000a14:	f003 fbf0 	bl	80041f8 <osMessageQueuePut>
			//ASTEAPTA '200MS' SI REIA BUCLA
			osDelay(200);
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f003 fb5f 	bl	80040dc <osDelay>
 8000a1e:	e7da      	b.n	80009d6 <StartDefaultTask+0x12>

		} else {
			//DACA MODUL ESTE 'MANUAL' PORNESTE TASK UL 4 SI LE SUSPENDA PE CELELALTE 3
			osThreadResume(myTask04Handle);
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <StartDefaultTask+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fb38 	bl	800409a <osThreadResume>
			osThreadSuspend(myTask03Handle);
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <StartDefaultTask+0x9c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fb12 	bl	8004058 <osThreadSuspend>
			osThreadSuspend(myTask02Handle);
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <StartDefaultTask+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fb0d 	bl	8004058 <osThreadSuspend>
			osThreadSuspend(defaultTaskHandle);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <StartDefaultTask+0xa4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fb08 	bl	8004058 <osThreadSuspend>
		if (mod == AUTOMAT) {
 8000a48:	e7c5      	b.n	80009d6 <StartDefaultTask+0x12>
 8000a4a:	bf00      	nop
 8000a4c:	20000178 	.word	0x20000178
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	20000080 	.word	0x20000080
 8000a58:	2000017c 	.word	0x2000017c
 8000a5c:	20000180 	.word	0x20000180
 8000a60:	20000174 	.word	0x20000174
 8000a64:	20000170 	.word	0x20000170
 8000a68:	2000016c 	.word	0x2000016c

08000a6c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint16_t val_automat;
  /* Infinite loop */
  for(;;)
  {
	  //EXTRAGE DATELE DIN COADA
	  if(osMessageQueueGet(myQueue01Handle, &val_automat, (uint16_t*)1, 10) == osOK){
 8000a74:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <StartTask02+0xb8>)
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f107 010e 	add.w	r1, r7, #14
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f003 fc1a 	bl	80042b8 <osMessageQueueGet>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d147      	bne.n	8000b1a <StartTask02+0xae>
			  if(val_automat < 512){
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a90:	d212      	bcs.n	8000ab8 <StartTask02+0x4c>
				  //DACA VALOAREA ESTE < 512 SE APRINDE UN LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <StartTask02+0xbc>)
 8000a9a:	f001 fe7f 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa4:	4820      	ldr	r0, [pc, #128]	; (8000b28 <StartTask02+0xbc>)
 8000aa6:	f001 fe79 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <StartTask02+0xbc>)
 8000ab2:	f001 fe73 	bl	800279c <HAL_GPIO_WritePin>
 8000ab6:	e030      	b.n	8000b1a <StartTask02+0xae>
			  } else if(val_automat >= 512 && val_automat < 768 ){
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000abe:	d316      	bcc.n	8000aee <StartTask02+0x82>
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ac6:	d212      	bcs.n	8000aee <StartTask02+0x82>
				  //DACA VALOAREA ESTE >=512 && < 768 SE APRIND 2 LEDURI
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <StartTask02+0xbc>)
 8000ad0:	f001 fe64 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <StartTask02+0xbc>)
 8000adc:	f001 fe5e 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <StartTask02+0xbc>)
 8000ae8:	f001 fe58 	bl	800279c <HAL_GPIO_WritePin>
 8000aec:	e015      	b.n	8000b1a <StartTask02+0xae>
			  }else if(val_automat >= 768){
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000af4:	d311      	bcc.n	8000b1a <StartTask02+0xae>
				  //DACA VALOAREA ESTE >= 768 SE APRIND TOATE 3 LEDURILE
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <StartTask02+0xbc>)
 8000afe:	f001 fe4d 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <StartTask02+0xbc>)
 8000b0a:	f001 fe47 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <StartTask02+0xbc>)
 8000b16:	f001 fe41 	bl	800279c <HAL_GPIO_WritePin>
			  }
	  }
	  //ASTEAPTA '200MS' SI REIA BUCLA
	  osDelay(200);
 8000b1a:	20c8      	movs	r0, #200	; 0xc8
 8000b1c:	f003 fade 	bl	80040dc <osDelay>
	  if(osMessageQueueGet(myQueue01Handle, &val_automat, (uint16_t*)1, 10) == osOK){
 8000b20:	e7a8      	b.n	8000a74 <StartTask02+0x8>
 8000b22:	bf00      	nop
 8000b24:	2000017c 	.word	0x2000017c
 8000b28:	40020000 	.word	0x40020000

08000b2c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	uint16_t val_automat;
  /* Infinite loop */
  for(;;)
  {
	  //EXTRAGE VALORILE DIN COADA
	  if(osMessageQueueGet(myQueue02Handle, &val_automat, (uint16_t*)1, 10) == osOK)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <StartTask03+0x54>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	f107 010a 	add.w	r1, r7, #10
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f003 fbba 	bl	80042b8 <osMessageQueueGet>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d115      	bne.n	8000b76 <StartTask03+0x4a>
	  	  	    {
		  	  	  	//STOCHEAZA VALORILE EXTRASE, IN BUFFER
	  	  	    	sprintf(buffer,"ADC_read_value:%d\r\n", val_automat);
 8000b4a:	897b      	ldrh	r3, [r7, #10]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	490c      	ldr	r1, [pc, #48]	; (8000b84 <StartTask03+0x58>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f006 fa29 	bl	8006fac <siprintf>
	  	  	    	//AFISAZA MESAJUL IN PORTUL SERIAL
	  	  	    	HAL_UART_Transmit(&huart2, (uint16_t*)buffer,strlen(buffer),HAL_MAX_DELAY);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb3e 	bl	80001e0 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	f107 010c 	add.w	r1, r7, #12
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <StartTask03+0x5c>)
 8000b72:	f002 fddc 	bl	800372e <HAL_UART_Transmit>
	  	  	    }
	  	  //ASTEAPTA '100MS' SI REIA BUCLA
	  	  osDelay(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f003 fab0 	bl	80040dc <osDelay>
	  if(osMessageQueueGet(myQueue02Handle, &val_automat, (uint16_t*)1, 10) == osOK)
 8000b7c:	e7da      	b.n	8000b34 <StartTask03+0x8>
 8000b7e:	bf00      	nop
 8000b80:	20000180 	.word	0x20000180
 8000b84:	08007954 	.word	0x08007954
 8000b88:	20000128 	.word	0x20000128

08000b8c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//MESAJUL AFISAT IN PORTUL SERIAL ATUNCI CAND SE TRECE IN MODUL 'MANUAL'
	char *port = "mod manual\r\t\t";
 8000b94:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <StartTask04+0x10c>)
 8000b96:	617b      	str	r3, [r7, #20]
	uint16_t val_manual;
  /* Infinite loop */
  for(;;)
  {
	  //VERIFICA DACA MODUL ESTE 'MANUAL'
	  if(mod == MANUAL){
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <StartTask04+0x110>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d162      	bne.n	8000c66 <StartTask04+0xda>
		  //TRIMITE MESAJUL 'mod manual' IN PORTUL SERIAL
		  HAL_UART_Transmit(&huart2, (uint16_t*)port,strlen(port),HAL_MAX_DELAY);
 8000ba0:	6978      	ldr	r0, [r7, #20]
 8000ba2:	f7ff fb1d 	bl	80001e0 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	6979      	ldr	r1, [r7, #20]
 8000bb0:	483b      	ldr	r0, [pc, #236]	; (8000ca0 <StartTask04+0x114>)
 8000bb2:	f002 fdbc 	bl	800372e <HAL_UART_Transmit>
		  //INCEPE CONVERSIA ADC UTILIZAND DMA
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)valADC, 2);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <StartTask04+0x118>)
 8000bc0:	f000 fc46 	bl	8001450 <HAL_ADC_Start_DMA>
		  //CITESTE VALOAREA ADC IN 'valADC[1]'
		  valADC[1] = HAL_ADC_GetValue(&hadc1);
 8000bc4:	4837      	ldr	r0, [pc, #220]	; (8000ca4 <StartTask04+0x118>)
 8000bc6:	f000 fd33 	bl	8001630 <HAL_ADC_GetValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	81fb      	strh	r3, [r7, #14]
		  //COPIAZA VALOAREA IN VARIABILA 'val_manual'
		  val_manual = valADC[1];
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	827b      	strh	r3, [r7, #18]
			 if(val_manual < 512){
 8000bd4:	8a7b      	ldrh	r3, [r7, #18]
 8000bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bda:	d212      	bcs.n	8000c02 <StartTask04+0x76>
				 //DACA VALOAREA ESTE < 512 SE APRINDE UN LED
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	4831      	ldr	r0, [pc, #196]	; (8000ca8 <StartTask04+0x11c>)
 8000be4:	f001 fdda 	bl	800279c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <StartTask04+0x11c>)
 8000bf0:	f001 fdd4 	bl	800279c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <StartTask04+0x11c>)
 8000bfc:	f001 fdce 	bl	800279c <HAL_GPIO_WritePin>
 8000c00:	e045      	b.n	8000c8e <StartTask04+0x102>
			  }else if(val_manual >= 512 && val_manual < 768 ){
 8000c02:	8a7b      	ldrh	r3, [r7, #18]
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c08:	d316      	bcc.n	8000c38 <StartTask04+0xac>
 8000c0a:	8a7b      	ldrh	r3, [r7, #18]
 8000c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c10:	d212      	bcs.n	8000c38 <StartTask04+0xac>
				  //DACA VALOAREA ESTE >=512 && < 768 SE APRIND 2 LEDURI
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <StartTask04+0x11c>)
 8000c1a:	f001 fdbf 	bl	800279c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c24:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <StartTask04+0x11c>)
 8000c26:	f001 fdb9 	bl	800279c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <StartTask04+0x11c>)
 8000c32:	f001 fdb3 	bl	800279c <HAL_GPIO_WritePin>
 8000c36:	e02a      	b.n	8000c8e <StartTask04+0x102>
			  }else if(val_manual >= 768){
 8000c38:	8a7b      	ldrh	r3, [r7, #18]
 8000c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c3e:	d326      	bcc.n	8000c8e <StartTask04+0x102>
				  //DACA VALOAREA ESTE >= 768 SE APRIND TOATE 3 LEDURILE
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <StartTask04+0x11c>)
 8000c48:	f001 fda8 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <StartTask04+0x11c>)
 8000c54:	f001 fda2 	bl	800279c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5e:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <StartTask04+0x11c>)
 8000c60:	f001 fd9c 	bl	800279c <HAL_GPIO_WritePin>
 8000c64:	e013      	b.n	8000c8e <StartTask04+0x102>
			  }
	  }
	  else {
		  //DACA MODUL ESTE 'AUTOMAT' SES SUSPENDA ACEST TASK SI SE PORNESC CELELALTE
		  osThreadSuspend(myTask04Handle);
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <StartTask04+0x120>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 f9f4 	bl	8004058 <osThreadSuspend>
		  osThreadResume(defaultTaskHandle);
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <StartTask04+0x124>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fa10 	bl	800409a <osThreadResume>
		  osThreadResume(myTask02Handle);
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <StartTask04+0x128>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fa0b 	bl	800409a <osThreadResume>
		  osThreadResume(myTask03Handle);
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <StartTask04+0x12c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fa06 	bl	800409a <osThreadResume>
	  }
	  //ASTEAPTA '500MS' SI REIA BUCLA
	  osDelay(500);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c92:	f003 fa23 	bl	80040dc <osDelay>
	  if(mod == MANUAL){
 8000c96:	e77f      	b.n	8000b98 <StartTask04+0xc>
 8000c98:	08007968 	.word	0x08007968
 8000c9c:	2000007c 	.word	0x2000007c
 8000ca0:	20000128 	.word	0x20000128
 8000ca4:	20000080 	.word	0x20000080
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	20000178 	.word	0x20000178
 8000cb0:	2000016c 	.word	0x2000016c
 8000cb4:	20000170 	.word	0x20000170
 8000cb8:	20000174 	.word	0x20000174

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 fa4b 	bl	8001168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40000c00 	.word	0x40000c00

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_MspInit+0x54>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_MspInit+0x54>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	f06f 0001 	mvn.w	r0, #1
 8000d32:	f001 f815 	bl	8001d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <HAL_ADC_MspInit+0xe8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d15e      	bne.n	8000e24 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a30      	ldr	r2, [pc, #192]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4820      	ldr	r0, [pc, #128]	; (8000e34 <HAL_ADC_MspInit+0xf0>)
 8000db2:	f001 fb6f 	bl	8002494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000de0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dfa:	f000 ffdb 	bl	8001db4 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e04:	f7ff ff6c 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2105      	movs	r1, #5
 8000e18:	2012      	movs	r0, #18
 8000e1a:	f000 ffa1 	bl	8001d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e1e:	2012      	movs	r0, #18
 8000e20:	f000 ffba 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012000 	.word	0x40012000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	200000c8 	.word	0x200000c8
 8000e3c:	40026410 	.word	0x40026410

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12b      	bne.n	8000eba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000eb6:	f001 faed 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HAL_InitTick+0xe4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_InitTick+0xe4>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_InitTick+0xe4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000efc:	f107 0210 	add.w	r2, r7, #16
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f912 	bl	8003130 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d103      	bne.n	8000f1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f16:	f002 f8e3 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8000f1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f1c:	e004      	b.n	8000f28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f1e:	f002 f8df 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8000f22:	4603      	mov	r3, r0
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_InitTick+0xe8>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	0c9b      	lsrs	r3, r3, #18
 8000f32:	3b01      	subs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_InitTick+0xec>)
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <HAL_InitTick+0xf0>)
 8000f3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_InitTick+0xec>)
 8000f3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f42:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_InitTick+0xec>)
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_InitTick+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_InitTick+0xec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_InitTick+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <HAL_InitTick+0xec>)
 8000f5e:	f002 f919 	bl	8003194 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11b      	bne.n	8000fa8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <HAL_InitTick+0xec>)
 8000f72:	f002 f969 	bl	8003248 <HAL_TIM_Base_Start_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d111      	bne.n	8000fa8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f000 ff07 	bl	8001d98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d808      	bhi.n	8000fa2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2032      	movs	r0, #50	; 0x32
 8000f96:	f000 fee3 	bl	8001d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0xf4>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e002      	b.n	8000fa8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3738      	adds	r7, #56	; 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	20000184 	.word	0x20000184
 8000fc0:	40000c00 	.word	0x40000c00
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <ADC_IRQHandler+0x10>)
 8000ffa:	f000 f918 	bl	800122e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000080 	.word	0x20000080

08001008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800100c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001010:	f001 fbde 	bl	80027d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM5_IRQHandler+0x10>)
 800101e:	f002 f975 	bl	800330c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000184 	.word	0x20000184

0800102c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream0_IRQHandler+0x10>)
 8001032:	f000 ffc5 	bl	8001fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000c8 	.word	0x200000c8

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f005 ffc4 	bl	8006ffc <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20018000 	.word	0x20018000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200001cc 	.word	0x200001cc
 80010a8:	20004c70 	.word	0x20004c70

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f005 ff83 	bl	8007008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa43 	bl	800058c <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001108:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001114:	08007ab4 	.word	0x08007ab4
  ldr r2, =_sbss
 8001118:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800111c:	20004c6c 	.word	0x20004c6c

08001120 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <DMA1_Stream0_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 fdfc 	bl	8001d4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff febc 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fdc8 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	200001d0 	.word	0x200001d0

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200001d0 	.word	0x200001d0

080011a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e033      	b.n	8001226 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fdbc 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	f043 0202 	orr.w	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fb70 	bl	80018e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f023 0303 	bic.w	r3, r3, #3
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
 8001216:	e001      	b.n	800121c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d049      	beq.n	80012f8 <HAL_ADC_IRQHandler+0xca>
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d046      	beq.n	80012f8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12b      	bne.n	80012e8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001294:	2b00      	cmp	r3, #0
 8001296:	d127      	bne.n	80012e8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d119      	bne.n	80012e8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0220 	bic.w	r2, r2, #32
 80012c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f9ae 	bl	800164a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0212 	mvn.w	r2, #18
 80012f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d057      	beq.n	80013be <HAL_ADC_IRQHandler+0x190>
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d054      	beq.n	80013be <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d139      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12b      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d124      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11d      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001376:	2b00      	cmp	r3, #0
 8001378:	d119      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fc14 	bl	8001bdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f06f 020c 	mvn.w	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013cc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d017      	beq.n	8001404 <HAL_ADC_IRQHandler+0x1d6>
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d014      	beq.n	8001404 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d10d      	bne.n	8001404 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f93c 	bl	8001672 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f06f 0201 	mvn.w	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001412:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <HAL_ADC_IRQHandler+0x218>
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d012      	beq.n	8001446 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0220 	mvn.w	r2, #32
 8001434:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f925 	bl	8001686 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0220 	mvn.w	r2, #32
 8001444:	601a      	str	r2, [r3, #0]
  }
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start_DMA+0x1e>
 800146a:	2302      	movs	r3, #2
 800146c:	e0ce      	b.n	800160c <HAL_ADC_Start_DMA+0x1bc>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d018      	beq.n	80014b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001494:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_ADC_Start_DMA+0x1c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <HAL_ADC_Start_DMA+0x1c8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9a      	lsrs	r2, r3, #18
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c4:	d107      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 8086 	bne.w	80015f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001524:	d106      	bne.n	8001534 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f023 0206 	bic.w	r2, r3, #6
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
 8001532:	e002      	b.n	800153a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_ADC_Start_DMA+0x1cc>)
 8001544:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <HAL_ADC_Start_DMA+0x1d0>)
 800154c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	4a34      	ldr	r2, [pc, #208]	; (8001624 <HAL_ADC_Start_DMA+0x1d4>)
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_ADC_Start_DMA+0x1d8>)
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001576:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	334c      	adds	r3, #76	; 0x4c
 8001592:	4619      	mov	r1, r3
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f000 fcba 	bl	8001f10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d129      	bne.n	800160a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	e020      	b.n	800160a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_ADC_Start_DMA+0x1dc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d11b      	bne.n	800160a <HAL_ADC_Start_DMA+0x1ba>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d114      	bne.n	800160a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	e00b      	b.n	800160a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83
 800161c:	40012300 	.word	0x40012300
 8001620:	08001ad9 	.word	0x08001ad9
 8001624:	08001b93 	.word	0x08001b93
 8001628:	08001baf 	.word	0x08001baf
 800162c:	40012000 	.word	0x40012000

08001630 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1c>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e105      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x228>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d925      	bls.n	8001714 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	3b1e      	subs	r3, #30
 80016de:	2207      	movs	r2, #7
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43da      	mvns	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	400a      	ands	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68d9      	ldr	r1, [r3, #12]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	4603      	mov	r3, r0
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4403      	add	r3, r0
 8001706:	3b1e      	subs	r3, #30
 8001708:	409a      	lsls	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	e022      	b.n	800175a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6919      	ldr	r1, [r3, #16]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	2207      	movs	r2, #7
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	400a      	ands	r2, r1
 8001736:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6919      	ldr	r1, [r3, #16]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	4603      	mov	r3, r0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4403      	add	r3, r0
 8001750:	409a      	lsls	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b06      	cmp	r3, #6
 8001760:	d824      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	3b05      	subs	r3, #5
 8001774:	221f      	movs	r2, #31
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	400a      	ands	r2, r1
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	3b05      	subs	r3, #5
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	e04c      	b.n	8001846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d824      	bhi.n	80017fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b23      	subs	r3, #35	; 0x23
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43da      	mvns	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	400a      	ands	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b23      	subs	r3, #35	; 0x23
 80017f0:	fa00 f203 	lsl.w	r2, r0, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
 80017fc:	e023      	b.n	8001846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3b41      	subs	r3, #65	; 0x41
 8001810:	221f      	movs	r2, #31
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	400a      	ands	r2, r1
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b41      	subs	r3, #65	; 0x41
 800183a:	fa00 f203 	lsl.w	r2, r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_ADC_ConfigChannel+0x234>)
 8001848:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <HAL_ADC_ConfigChannel+0x238>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d109      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x1cc>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b12      	cmp	r3, #18
 800185a:	d105      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_ADC_ConfigChannel+0x238>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d123      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x21e>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b10      	cmp	r3, #16
 8001878:	d003      	beq.n	8001882 <HAL_ADC_ConfigChannel+0x1e6>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b11      	cmp	r3, #17
 8001880:	d11b      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d111      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_ADC_ConfigChannel+0x240>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9a      	lsrs	r2, r3, #18
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40012300 	.word	0x40012300
 80018d4:	40012000 	.word	0x40012000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <ADC_Init+0x1f0>)
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <ADC_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e00f      	b.n	80019de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0202 	bic.w	r2, r2, #2
 80019ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	3b01      	subs	r3, #1
 8001a38:	035a      	lsls	r2, r3, #13
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e007      	b.n	8001a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	051a      	lsls	r2, r3, #20
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a96:	025a      	lsls	r2, r3, #9
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	029a      	lsls	r2, r3, #10
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d13c      	bne.n	8001b6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12b      	bne.n	8001b64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d127      	bne.n	8001b64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d119      	bne.n	8001b64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0220 	bic.w	r2, r2, #32
 8001b3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff fd70 	bl	800164a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b6a:	e00e      	b.n	8001b8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fd84 	bl	8001686 <HAL_ADC_ErrorCallback>
}
 8001b7e:	e004      	b.n	8001b8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fd5c 	bl	800165e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fd59 	bl	8001686 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff4c 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d72:	f7ff ff61 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001d76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	6978      	ldr	r0, [r7, #20]
 8001d7e:	f7ff ffb1 	bl	8001ce4 <NVIC_EncodePriority>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff80 	bl	8001c90 <__NVIC_SetPriority>
}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff54 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff f9e6 	bl	8001190 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e099      	b.n	8001f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df0:	e00f      	b.n	8001e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001df2:	f7ff f9cd 	bl	8001190 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d908      	bls.n	8001e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e078      	b.n	8001f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e8      	bne.n	8001df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_DMA_Init+0x158>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4313      	orrs	r3, r2
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d117      	bne.n	8001ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fa6f 	bl	800239c <DMA_CheckFifoParam>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e016      	b.n	8001f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fa26 	bl	8002330 <DMA_CalcBaseAndBitshift>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	223f      	movs	r2, #63	; 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	f010803f 	.word	0xf010803f

08001f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Start_IT+0x26>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e040      	b.n	8001fb8 <HAL_DMA_Start_IT+0xa8>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d12f      	bne.n	8001faa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f9b8 	bl	80022d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0216 	orr.w	r2, r2, #22
 8001f7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e005      	b.n	8001fb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fcc:	4b8e      	ldr	r3, [pc, #568]	; (8002208 <HAL_DMA_IRQHandler+0x248>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a8e      	ldr	r2, [pc, #568]	; (800220c <HAL_DMA_IRQHandler+0x24c>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2208      	movs	r2, #8
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01a      	beq.n	800202c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0204 	bic.w	r2, r2, #4
 8002012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2208      	movs	r2, #8
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2201      	movs	r2, #1
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2201      	movs	r2, #1
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f043 0202 	orr.w	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2204      	movs	r2, #4
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d012      	beq.n	8002098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00b      	beq.n	8002098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	2204      	movs	r2, #4
 8002086:	409a      	lsls	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2210      	movs	r2, #16
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d043      	beq.n	8002130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03c      	beq.n	8002130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2210      	movs	r2, #16
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d018      	beq.n	8002102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d024      	beq.n	8002130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
 80020ee:	e01f      	b.n	8002130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e016      	b.n	8002130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0208 	bic.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2220      	movs	r2, #32
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 808f 	beq.w	8002260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8087 	beq.w	8002260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2220      	movs	r2, #32
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b05      	cmp	r3, #5
 8002168:	d136      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0216 	bic.w	r2, r2, #22
 8002178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <HAL_DMA_IRQHandler+0x1da>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0208 	bic.w	r2, r2, #8
 80021a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	223f      	movs	r2, #63	; 0x3f
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d07e      	beq.n	80022cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
        }
        return;
 80021d6:	e079      	b.n	80022cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01d      	beq.n	8002222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d031      	beq.n	8002260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
 8002204:	e02c      	b.n	8002260 <HAL_DMA_IRQHandler+0x2a0>
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e01e      	b.n	8002260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10f      	bne.n	8002250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0210 	bic.w	r2, r2, #16
 800223e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	2b00      	cmp	r3, #0
 8002266:	d032      	beq.n	80022ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d022      	beq.n	80022ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2205      	movs	r2, #5
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3301      	adds	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d307      	bcc.n	80022a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f2      	bne.n	800228c <HAL_DMA_IRQHandler+0x2cc>
 80022a6:	e000      	b.n	80022aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
 80022ca:	e000      	b.n	80022ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80022cc:	bf00      	nop
    }
  }
}
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3b10      	subs	r3, #16
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <DMA_CalcBaseAndBitshift+0x64>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <DMA_CalcBaseAndBitshift+0x68>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d909      	bls.n	8002372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	1d1a      	adds	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	659a      	str	r2, [r3, #88]	; 0x58
 8002370:	e007      	b.n	8002382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	aaaaaaab 	.word	0xaaaaaaab
 8002398:	08007a68 	.word	0x08007a68

0800239c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d856      	bhi.n	800246a <DMA_CheckFifoParam+0xce>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <DMA_CheckFifoParam+0x28>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023e7 	.word	0x080023e7
 80023cc:	080023d5 	.word	0x080023d5
 80023d0:	0800246b 	.word	0x0800246b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d046      	beq.n	800246e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e043      	b.n	800246e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ee:	d140      	bne.n	8002472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f4:	e03d      	b.n	8002472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d121      	bne.n	8002444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d837      	bhi.n	8002476 <DMA_CheckFifoParam+0xda>
 8002406:	a201      	add	r2, pc, #4	; (adr r2, 800240c <DMA_CheckFifoParam+0x70>)
 8002408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240c:	0800241d 	.word	0x0800241d
 8002410:	08002423 	.word	0x08002423
 8002414:	0800241d 	.word	0x0800241d
 8002418:	08002435 	.word	0x08002435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      break;
 8002420:	e030      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d025      	beq.n	800247a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002432:	e022      	b.n	800247a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800243c:	d11f      	bne.n	800247e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002442:	e01c      	b.n	800247e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d903      	bls.n	8002452 <DMA_CheckFifoParam+0xb6>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d003      	beq.n	8002458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002450:	e018      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      break;
 8002456:	e015      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e00b      	b.n	8002482 <DMA_CheckFifoParam+0xe6>
      break;
 800246a:	bf00      	nop
 800246c:	e00a      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e008      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e006      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e004      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e002      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;   
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
    }
  } 
  
  return status; 
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e159      	b.n	8002764 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8148 	bne.w	800275e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a2 	beq.w	800275e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_GPIO_Init+0x2e8>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_GPIO_Init+0x2e8>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <HAL_GPIO_Init+0x2e8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002636:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_GPIO_Init+0x2ec>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x202>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2f4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x1fe>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a47      	ldr	r2, [pc, #284]	; (800278c <HAL_GPIO_Init+0x2f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x1fa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_GPIO_Init+0x2fc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x1f6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_GPIO_Init+0x300>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x1f2>
 8002682:	2304      	movs	r3, #4
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002686:	2307      	movs	r3, #7
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x204>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x204>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	; (8002780 <HAL_GPIO_Init+0x2ec>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_GPIO_Init+0x304>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <HAL_GPIO_Init+0x304>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_GPIO_Init+0x304>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <HAL_GPIO_Init+0x304>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_GPIO_Init+0x304>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_GPIO_Init+0x304>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_GPIO_Init+0x304>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_GPIO_Init+0x304>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f aea2 	bls.w	80024b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe f8be 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e267      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e242      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fc6a 	bl	8001190 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fc66 	bl	8001190 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e207      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc56 	bl	8001190 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fc52 	bl	8001190 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fc0b 	bl	8001190 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fc07 	bl	8001190 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fbea 	bl	8001190 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe fbe6 	bl	8001190 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e187      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fbca 	bl	8001190 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe fbc6 	bl	8001190 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e167      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e01b      	b.n	8002a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fe fbb3 	bl	8001190 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fbaf 	bl	8001190 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e150      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8097 	beq.w	8002b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fb6f 	bl	8001190 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fb6b 	bl	8001190 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e10c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ea>
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x30c>
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5e      	ldr	r2, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5b      	ldr	r2, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fb30 	bl	8001190 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe fb2c 	bl	8001190 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe fb1a 	bl	8001190 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe fb16 	bl	8001190 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a1 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d05c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d141      	bne.n	8002c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe faea 	bl	8001190 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fae6 	bl	8001190 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fabf 	bl	8001190 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fabb 	bl	8001190 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x416>
 8002c34:	e054      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe faa8 	bl	8001190 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe faa4 	bl	8001190 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fe f9d6 	bl	8001190 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe f9d2 	bl	8001190 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f81a 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08007a50 	.word	0x08007a50
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b094      	sub	sp, #80	; 0x50
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ecc:	2300      	movs	r3, #0
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b79      	ldr	r3, [pc, #484]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80e1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e0db      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ef4:	e0db      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efa:	e0d8      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	0159      	lsls	r1, r3, #5
 8002f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f40:	0150      	lsls	r0, r2, #5
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4621      	mov	r1, r4
 8002f48:	1a51      	subs	r1, r2, r1
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f60:	4659      	mov	r1, fp
 8002f62:	018b      	lsls	r3, r1, #6
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	018a      	lsls	r2, r1, #6
 8002f6e:	4651      	mov	r1, sl
 8002f70:	ebb2 0801 	subs.w	r8, r2, r1
 8002f74:	4659      	mov	r1, fp
 8002f76:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	eb18 0303 	adds.w	r3, r8, r3
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	eb49 0303 	adc.w	r3, r9, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	024b      	lsls	r3, r1, #9
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb8:	4621      	mov	r1, r4
 8002fba:	024a      	lsls	r2, r1, #9
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fcc:	f7fd f960 	bl	8000290 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd8:	e058      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	f04f 0000 	mov.w	r0, #0
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	0159      	lsls	r1, r3, #5
 8003002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003006:	0150      	lsls	r0, r2, #5
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4641      	mov	r1, r8
 800300e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003012:	4649      	mov	r1, r9
 8003014:	eb63 0b01 	sbc.w	fp, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800302c:	ebb2 040a 	subs.w	r4, r2, sl
 8003030:	eb63 050b 	sbc.w	r5, r3, fp
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	00eb      	lsls	r3, r5, #3
 800303e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003042:	00e2      	lsls	r2, r4, #3
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4643      	mov	r3, r8
 800304a:	18e3      	adds	r3, r4, r3
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	464b      	mov	r3, r9
 8003050:	eb45 0303 	adc.w	r3, r5, r3
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	2200      	movs	r2, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	61fa      	str	r2, [r7, #28]
 800307c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003080:	f7fd f906 	bl	8000290 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800309c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a6:	e002      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3750      	adds	r7, #80	; 0x50
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08007a60 	.word	0x08007a60

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff ffdc 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	08007a60 	.word	0x08007a60

08003130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <HAL_RCC_GetClockConfig+0x60>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40023c00 	.word	0x40023c00

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e041      	b.n	800322a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f839 	bl	8003232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f9ca 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e044      	b.n	80032ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d013      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x6c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <HAL_TIM_Base_Start_IT+0xb4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_TIM_Base_Start_IT+0xb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x6c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a17      	ldr	r2, [pc, #92]	; (8003304 <HAL_TIM_Base_Start_IT+0xbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x6c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_TIM_Base_Start_IT+0xc0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d111      	bne.n	80032d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d010      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	e007      	b.n	80032e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40014000 	.word	0x40014000

0800330c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8ee 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8e0 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8f1 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0204 	mvn.w	r2, #4
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8c4 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8b6 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8c7 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0208 	mvn.w	r2, #8
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2204      	movs	r2, #4
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f89a 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f88c 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f89d 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2208      	movs	r2, #8
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f870 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f862 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f873 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0201 	mvn.w	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fc16 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8e2 	bl	8003680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f838 	bl	8003558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0220 	mvn.w	r2, #32
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8ac 	bl	800366c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a34      	ldr	r2, [pc, #208]	; (8003650 <TIM_Base_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a31      	ldr	r2, [pc, #196]	; (8003654 <TIM_Base_SetConfig+0xe8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a30      	ldr	r2, [pc, #192]	; (8003658 <TIM_Base_SetConfig+0xec>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2f      	ldr	r2, [pc, #188]	; (800365c <TIM_Base_SetConfig+0xf0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <TIM_Base_SetConfig+0xe4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d017      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a22      	ldr	r2, [pc, #136]	; (8003654 <TIM_Base_SetConfig+0xe8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a21      	ldr	r2, [pc, #132]	; (8003658 <TIM_Base_SetConfig+0xec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00f      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a20      	ldr	r2, [pc, #128]	; (800365c <TIM_Base_SetConfig+0xf0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <TIM_Base_SetConfig+0xf4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <TIM_Base_SetConfig+0xf8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <TIM_Base_SetConfig+0xfc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <TIM_Base_SetConfig+0xe4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e03f      	b.n	8003726 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fbc0 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f929 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800370c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08a      	sub	sp, #40	; 0x28
 8003732:	af02      	add	r7, sp, #8
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d17c      	bne.n	8003848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_Transmit+0x2c>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e075      	b.n	800384a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_UART_Transmit+0x3e>
 8003768:	2302      	movs	r3, #2
 800376a:	e06e      	b.n	800384a <HAL_UART_Transmit+0x11c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2221      	movs	r2, #33	; 0x21
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003782:	f7fd fd05 	bl	8001190 <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	88fa      	ldrh	r2, [r7, #6]
 800378c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d108      	bne.n	80037b0 <HAL_UART_Transmit+0x82>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e003      	b.n	80037b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037c0:	e02a      	b.n	8003818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f840 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e036      	b.n	800384a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	3302      	adds	r3, #2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e007      	b.n	800380a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1cf      	bne.n	80037c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	2140      	movs	r1, #64	; 0x40
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f810 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e006      	b.n	800384a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b090      	sub	sp, #64	; 0x40
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003862:	e050      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d04c      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x30>
 8003872:	f7fd fc8d 	bl	8001190 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387e:	429a      	cmp	r2, r3
 8003880:	d241      	bcs.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a2:	637a      	str	r2, [r7, #52]	; 0x34
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d6:	623a      	str	r2, [r7, #32]
 80038d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	69f9      	ldr	r1, [r7, #28]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d09f      	beq.n	8003864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3740      	adds	r7, #64	; 0x40
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003934:	b0c0      	sub	sp, #256	; 0x100
 8003936:	af00      	add	r7, sp, #0
 8003938:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	ea40 0301 	orr.w	r3, r0, r1
 8003958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003988:	f021 010c 	bic.w	r1, r1, #12
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003996:	430b      	orrs	r3, r1
 8003998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	6999      	ldr	r1, [r3, #24]
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	ea40 0301 	orr.w	r3, r0, r1
 80039b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b8f      	ldr	r3, [pc, #572]	; (8003bfc <UART_SetConfig+0x2cc>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d005      	beq.n	80039d0 <UART_SetConfig+0xa0>
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <UART_SetConfig+0x2d0>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d104      	bne.n	80039da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7ff fb9a 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 80039d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039d8:	e003      	b.n	80039e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7ff fb81 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 80039de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	f040 810c 	bne.w	8003c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	1891      	adds	r1, r2, r2
 8003a08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a12:	4621      	mov	r1, r4
 8003a14:	eb12 0801 	adds.w	r8, r2, r1
 8003a18:	4629      	mov	r1, r5
 8003a1a:	eb43 0901 	adc.w	r9, r3, r1
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a32:	4690      	mov	r8, r2
 8003a34:	4699      	mov	r9, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	eb18 0303 	adds.w	r3, r8, r3
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a40:	462b      	mov	r3, r5
 8003a42:	eb49 0303 	adc.w	r3, r9, r3
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a5e:	460b      	mov	r3, r1
 8003a60:	18db      	adds	r3, r3, r3
 8003a62:	653b      	str	r3, [r7, #80]	; 0x50
 8003a64:	4613      	mov	r3, r2
 8003a66:	eb42 0303 	adc.w	r3, r2, r3
 8003a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a74:	f7fc fc0c 	bl	8000290 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011c      	lsls	r4, r3, #4
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac8:	4692      	mov	sl, r2
 8003aca:	469b      	mov	fp, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8003adc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003af4:	460b      	mov	r3, r1
 8003af6:	18db      	adds	r3, r3, r3
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
 8003afa:	4613      	mov	r3, r2
 8003afc:	eb42 0303 	adc.w	r3, r2, r3
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
 8003b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b0a:	f7fc fbc1 	bl	8000290 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003b16:	fba3 2301 	umull	r2, r3, r3, r1
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2264      	movs	r2, #100	; 0x64
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	1acb      	subs	r3, r1, r3
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b38:	441c      	add	r4, r3
 8003b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b54:	415b      	adcs	r3, r3
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6339      	str	r1, [r7, #48]	; 0x30
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b90:	464b      	mov	r3, r9
 8003b92:	460a      	mov	r2, r1
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	18db      	adds	r3, r3, r3
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	eb42 0303 	adc.w	r3, r2, r3
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bc6:	f7fc fb63 	bl	8000290 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	; 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4422      	add	r2, r4
 8003bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf8:	e106      	b.n	8003e08 <UART_SetConfig+0x4d8>
 8003bfa:	bf00      	nop
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40011400 	.word	0x40011400
 8003c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c1a:	4642      	mov	r2, r8
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	1891      	adds	r1, r2, r2
 8003c20:	6239      	str	r1, [r7, #32]
 8003c22:	415b      	adcs	r3, r3
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	1854      	adds	r4, r2, r1
 8003c2e:	4649      	mov	r1, r9
 8003c30:	eb43 0501 	adc.w	r5, r3, r1
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	00eb      	lsls	r3, r5, #3
 8003c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c42:	00e2      	lsls	r2, r4, #3
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	18e3      	adds	r3, r4, r3
 8003c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c50:	464b      	mov	r3, r9
 8003c52:	eb45 0303 	adc.w	r3, r5, r3
 8003c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c76:	4629      	mov	r1, r5
 8003c78:	008b      	lsls	r3, r1, #2
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c80:	4621      	mov	r1, r4
 8003c82:	008a      	lsls	r2, r1, #2
 8003c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c88:	f7fc fb02 	bl	8000290 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003c92:	fba3 2302 	umull	r2, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	011c      	lsls	r4, r3, #4
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ca4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	61b9      	str	r1, [r7, #24]
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	1851      	adds	r1, r2, r1
 8003cc0:	6139      	str	r1, [r7, #16]
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	414b      	adcs	r3, r1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	00cb      	lsls	r3, r1, #3
 8003cd8:	4651      	mov	r1, sl
 8003cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cde:	4651      	mov	r1, sl
 8003ce0:	00ca      	lsls	r2, r1, #3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4642      	mov	r2, r8
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d14:	4649      	mov	r1, r9
 8003d16:	008b      	lsls	r3, r1, #2
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1e:	4641      	mov	r1, r8
 8003d20:	008a      	lsls	r2, r1, #2
 8003d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d26:	f7fc fab3 	bl	8000290 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003d32:	fba3 2301 	umull	r2, r3, r3, r1
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2264      	movs	r2, #100	; 0x64
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	1acb      	subs	r3, r1, r3
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	3332      	adds	r3, #50	; 0x32
 8003d44:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d50:	441c      	add	r4, r3
 8003d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d56:	2200      	movs	r2, #0
 8003d58:	673b      	str	r3, [r7, #112]	; 0x70
 8003d5a:	677a      	str	r2, [r7, #116]	; 0x74
 8003d5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d70:	4641      	mov	r1, r8
 8003d72:	1851      	adds	r1, r2, r1
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	4649      	mov	r1, r9
 8003d78:	414b      	adcs	r3, r1
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d88:	4659      	mov	r1, fp
 8003d8a:	00cb      	lsls	r3, r1, #3
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d92:	4651      	mov	r1, sl
 8003d94:	00ca      	lsls	r2, r1, #3
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da2:	464b      	mov	r3, r9
 8003da4:	460a      	mov	r2, r1
 8003da6:	eb42 0303 	adc.w	r3, r2, r3
 8003daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	663b      	str	r3, [r7, #96]	; 0x60
 8003db6:	667a      	str	r2, [r7, #100]	; 0x64
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dce:	4641      	mov	r1, r8
 8003dd0:	008a      	lsls	r2, r1, #2
 8003dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dd6:	f7fc fa5b 	bl	8000290 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003de0:	fba3 1302 	umull	r1, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4422      	add	r2, r4
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__NVIC_SetPriority>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db0a      	blt.n	8003e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	490c      	ldr	r1, [pc, #48]	; (8003e64 <__NVIC_SetPriority+0x4c>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	0112      	lsls	r2, r2, #4
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e40:	e00a      	b.n	8003e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4908      	ldr	r1, [pc, #32]	; (8003e68 <__NVIC_SetPriority+0x50>)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	440b      	add	r3, r1
 8003e56:	761a      	strb	r2, [r3, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000e100 	.word	0xe000e100
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <SysTick_Handler+0x1c>)
 8003e72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e74:	f002 f830 	bl	8005ed8 <xTaskGetSchedulerState>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e7e:	f002 fe1b 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e90:	2100      	movs	r1, #0
 8003e92:	f06f 0004 	mvn.w	r0, #4
 8003e96:	f7ff ffbf 	bl	8003e18 <__NVIC_SetPriority>
#endif
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea6:	f3ef 8305 	mrs	r3, IPSR
 8003eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8003eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003eb2:	f06f 0305 	mvn.w	r3, #5
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e00c      	b.n	8003ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <osKernelInitialize+0x44>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <osKernelInitialize+0x44>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	e002      	b.n	8003ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ed4:	687b      	ldr	r3, [r7, #4]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200001d4 	.word	0x200001d4

08003ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eee:	f3ef 8305 	mrs	r3, IPSR
 8003ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003efa:	f06f 0305 	mvn.w	r3, #5
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	e010      	b.n	8003f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <osKernelStart+0x48>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d109      	bne.n	8003f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f0a:	f7ff ffbf 	bl	8003e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <osKernelStart+0x48>)
 8003f10:	2202      	movs	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f14:	f001 fb98 	bl	8005648 <vTaskStartScheduler>
      stat = osOK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	e002      	b.n	8003f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f24:	687b      	ldr	r3, [r7, #4]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200001d4 	.word	0x200001d4

08003f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	; 0x38
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f44:	f3ef 8305 	mrs	r3, IPSR
 8003f48:	617b      	str	r3, [r7, #20]
  return(result);
 8003f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d17e      	bne.n	800404e <osThreadNew+0x11a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d07b      	beq.n	800404e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f5a:	2318      	movs	r3, #24
 8003f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d045      	beq.n	8003ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <osThreadNew+0x48>
        name = attr->name;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <osThreadNew+0x6e>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b38      	cmp	r3, #56	; 0x38
 8003f94:	d805      	bhi.n	8003fa2 <osThreadNew+0x6e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <osThreadNew+0x72>
        return (NULL);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e054      	b.n	8004050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <osThreadNew+0xa8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b5b      	cmp	r3, #91	; 0x5b
 8003fc4:	d90a      	bls.n	8003fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <osThreadNew+0xa8>
        mem = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e010      	b.n	8003ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10c      	bne.n	8003ffe <osThreadNew+0xca>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <osThreadNew+0xca>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <osThreadNew+0xca>
          mem = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e001      	b.n	8003ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d110      	bne.n	8004026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800400c:	9202      	str	r2, [sp, #8]
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f001 f838 	bl	8005090 <xTaskCreateStatic>
 8004020:	4603      	mov	r3, r0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e013      	b.n	800404e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d110      	bne.n	800404e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	b29a      	uxth	r2, r3
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f001 f883 	bl	800514a <xTaskCreate>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <osThreadNew+0x11a>
            hTask = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800404e:	693b      	ldr	r3, [r7, #16]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004064:	f3ef 8305 	mrs	r3, IPSR
 8004068:	60fb      	str	r3, [r7, #12]
  return(result);
 800406a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004070:	f06f 0305 	mvn.w	r3, #5
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e00b      	b.n	8004090 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800407e:	f06f 0303 	mvn.w	r3, #3
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e004      	b.n	8004090 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800408a:	6938      	ldr	r0, [r7, #16]
 800408c:	f001 f9d6 	bl	800543c <vTaskSuspend>
  }

  return (stat);
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a6:	f3ef 8305 	mrs	r3, IPSR
 80040aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80040ac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <osThreadResume+0x20>
    stat = osErrorISR;
 80040b2:	f06f 0305 	mvn.w	r3, #5
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e00b      	b.n	80040d2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80040c0:	f06f 0303 	mvn.w	r3, #3
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e004      	b.n	80040d2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80040cc:	6938      	ldr	r0, [r7, #16]
 80040ce:	f001 fa5d 	bl	800558c <vTaskResume>
  }

  return (stat);
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e4:	f3ef 8305 	mrs	r3, IPSR
 80040e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <osDelay+0x1c>
    stat = osErrorISR;
 80040f0:	f06f 0305 	mvn.w	r3, #5
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e007      	b.n	8004108 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f001 f966 	bl	80053d4 <vTaskDelay>
    }
  }

  return (stat);
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004112:	b580      	push	{r7, lr}
 8004114:	b08a      	sub	sp, #40	; 0x28
 8004116:	af02      	add	r7, sp, #8
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	613b      	str	r3, [r7, #16]
  return(result);
 8004128:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d15f      	bne.n	80041ee <osMessageQueueNew+0xdc>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d05c      	beq.n	80041ee <osMessageQueueNew+0xdc>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d059      	beq.n	80041ee <osMessageQueueNew+0xdc>
    mem = -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d029      	beq.n	800419a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <osMessageQueueNew+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b4f      	cmp	r3, #79	; 0x4f
 8004154:	d90e      	bls.n	8004174 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <osMessageQueueNew+0x62>
        mem = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e014      	b.n	800419e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <osMessageQueueNew+0x8c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10c      	bne.n	800419e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <osMessageQueueNew+0x8c>
          mem = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e001      	b.n	800419e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10b      	bne.n	80041bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2100      	movs	r1, #0
 80041ae:	9100      	str	r1, [sp, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fa2e 	bl	8004614 <xQueueGenericCreateStatic>
 80041b8:	61f8      	str	r0, [r7, #28]
 80041ba:	e008      	b.n	80041ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80041c2:	2200      	movs	r2, #0
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa9c 	bl	8004704 <xQueueGenericCreate>
 80041cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e001      	b.n	80041e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	69f8      	ldr	r0, [r7, #28]
 80041ea:	f000 fef3 	bl	8004fd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80041ee:	69fb      	ldr	r3, [r7, #28]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004210:	f3ef 8305 	mrs	r3, IPSR
 8004214:	617b      	str	r3, [r7, #20]
  return(result);
 8004216:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004218:	2b00      	cmp	r3, #0
 800421a:	d028      	beq.n	800426e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <osMessageQueuePut+0x36>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <osMessageQueuePut+0x36>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800422e:	f06f 0303 	mvn.w	r3, #3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e038      	b.n	80042a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800423a:	f107 0210 	add.w	r2, r7, #16
 800423e:	2300      	movs	r3, #0
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	69b8      	ldr	r0, [r7, #24]
 8004244:	f000 fbba 	bl	80049bc <xQueueGenericSendFromISR>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d003      	beq.n	8004256 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800424e:	f06f 0302 	mvn.w	r3, #2
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e028      	b.n	80042a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d025      	beq.n	80042a8 <osMessageQueuePut+0xb0>
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <osMessageQueuePut+0xbc>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	e01c      	b.n	80042a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <osMessageQueuePut+0x82>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800427a:	f06f 0303 	mvn.w	r3, #3
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e012      	b.n	80042a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004282:	2300      	movs	r3, #0
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	69b8      	ldr	r0, [r7, #24]
 800428a:	f000 fa99 	bl	80047c0 <xQueueGenericSend>
 800428e:	4603      	mov	r3, r0
 8004290:	2b01      	cmp	r3, #1
 8004292:	d009      	beq.n	80042a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800429a:	f06f 0301 	mvn.w	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e002      	b.n	80042a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80042a2:	f06f 0302 	mvn.w	r3, #2
 80042a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80042a8:	69fb      	ldr	r3, [r7, #28]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ce:	f3ef 8305 	mrs	r3, IPSR
 80042d2:	617b      	str	r3, [r7, #20]
  return(result);
 80042d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d028      	beq.n	800432c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <osMessageQueueGet+0x34>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <osMessageQueueGet+0x34>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80042ec:	f06f 0303 	mvn.w	r3, #3
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e037      	b.n	8004364 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	461a      	mov	r2, r3
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	69b8      	ldr	r0, [r7, #24]
 8004302:	f000 fcd7 	bl	8004cb4 <xQueueReceiveFromISR>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d003      	beq.n	8004314 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800430c:	f06f 0302 	mvn.w	r3, #2
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e027      	b.n	8004364 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d024      	beq.n	8004364 <osMessageQueueGet+0xac>
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <osMessageQueueGet+0xb8>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	e01b      	b.n	8004364 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <osMessageQueueGet+0x80>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004338:	f06f 0303 	mvn.w	r3, #3
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e011      	b.n	8004364 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	69b8      	ldr	r0, [r7, #24]
 8004346:	f000 fbd5 	bl	8004af4 <xQueueReceive>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d009      	beq.n	8004364 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004356:	f06f 0301 	mvn.w	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e002      	b.n	8004364 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800435e:	f06f 0302 	mvn.w	r3, #2
 8004362:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004364:	69fb      	ldr	r3, [r7, #28]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004384:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a06      	ldr	r2, [pc, #24]	; (80043a4 <vApplicationGetIdleTaskMemory+0x30>)
 800438a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	200001d8 	.word	0x200001d8
 80043a4:	20000234 	.word	0x20000234

080043a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80043b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <vApplicationGetTimerTaskMemory+0x30>)
 80043be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c6:	601a      	str	r2, [r3, #0]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20000434 	.word	0x20000434
 80043d8:	20000490 	.word	0x20000490

080043dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f103 0208 	add.w	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 0208 	add.w	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f103 0208 	add.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d103      	bne.n	800449e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e00c      	b.n	80044b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3308      	adds	r3, #8
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e002      	b.n	80044ac <vListInsert+0x2e>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d2f6      	bcs.n	80044a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6892      	ldr	r2, [r2, #8]
 8004506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	d103      	bne.n	8004524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800456e:	f002 fa11 	bl	8006994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	441a      	add	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	3b01      	subs	r3, #1
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	441a      	add	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d114      	bne.n	80045ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01a      	beq.n	8004602 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3310      	adds	r3, #16
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 fac3 	bl	8005b5c <xTaskRemoveFromEventList>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d012      	beq.n	8004602 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <xQueueGenericReset+0xcc>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	e009      	b.n	8004602 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3310      	adds	r3, #16
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fef2 	bl	80043dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3324      	adds	r3, #36	; 0x24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff feed 	bl	80043dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004602:	f002 f9f7 	bl	80069f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <xQueueGenericCreateStatic+0x52>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <xQueueGenericCreateStatic+0x56>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <xQueueGenericCreateStatic+0x58>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	623b      	str	r3, [r7, #32]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <xQueueGenericCreateStatic+0x7e>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueGenericCreateStatic+0x82>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericCreateStatic+0x84>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	61fb      	str	r3, [r7, #28]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046b2:	2350      	movs	r3, #80	; 0x50
 80046b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d00a      	beq.n	80046d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61bb      	str	r3, [r7, #24]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f83f 	bl	8004778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3730      	adds	r7, #48	; 0x30
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	613b      	str	r3, [r7, #16]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	3350      	adds	r3, #80	; 0x50
 800473c:	4618      	mov	r0, r3
 800473e:	f002 fa4b 	bl	8006bd8 <pvPortMalloc>
 8004742:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d011      	beq.n	800476e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3350      	adds	r3, #80	; 0x50
 8004752:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f805 	bl	8004778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800476e:	69bb      	ldr	r3, [r7, #24]
	}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e002      	b.n	800479a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047a6:	2101      	movs	r1, #1
 80047a8:	69b8      	ldr	r0, [r7, #24]
 80047aa:	f7ff fecb 	bl	8004544 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ce:	2300      	movs	r3, #0
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSend+0x32>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <xQueueGenericSend+0x40>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <xQueueGenericSend+0x44>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <xQueueGenericSend+0x46>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <xQueueGenericSend+0x60>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d103      	bne.n	800482e <xQueueGenericSend+0x6e>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <xQueueGenericSend+0x72>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSend+0x74>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericSend+0x8e>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	623b      	str	r3, [r7, #32]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484e:	f001 fb43 	bl	8005ed8 <xTaskGetSchedulerState>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xQueueGenericSend+0x9e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <xQueueGenericSend+0xa2>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <xQueueGenericSend+0xa4>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xQueueGenericSend+0xbe>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	61fb      	str	r3, [r7, #28]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800487e:	f002 f889 	bl	8006994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <xQueueGenericSend+0xd4>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d129      	bne.n	80048e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489a:	f000 fa8b 	bl	8004db4 <prvCopyDataToQueue>
 800489e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	3324      	adds	r3, #36	; 0x24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f955 	bl	8005b5c <xTaskRemoveFromEventList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048b8:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <xQueueGenericSend+0x1f8>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	e00a      	b.n	80048e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <xQueueGenericSend+0x1f8>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048e0:	f002 f888 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e063      	b.n	80049b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ee:	f002 f881 	bl	80069f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e05c      	b.n	80049b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f98f 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800490a:	f002 f873 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490e:	f000 ff01 	bl	8005714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004912:	f002 f83f 	bl	8006994 <vPortEnterCritical>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491c:	b25b      	sxtb	r3, r3
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d103      	bne.n	800492c <xQueueGenericSend+0x16c>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004932:	b25b      	sxtb	r3, r3
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d103      	bne.n	8004942 <xQueueGenericSend+0x182>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004942:	f002 f857 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004946:	1d3a      	adds	r2, r7, #4
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f97e 	bl	8005c50 <xTaskCheckForTimeOut>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d124      	bne.n	80049a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800495a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495c:	f000 fb22 	bl	8004fa4 <prvIsQueueFull>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	3310      	adds	r3, #16
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f8a4 	bl	8005abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004976:	f000 faad 	bl	8004ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800497a:	f000 fed9 	bl	8005730 <xTaskResumeAll>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f af7c 	bne.w	800487e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <xQueueGenericSend+0x1f8>)
 8004988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	e772      	b.n	800487e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800499a:	f000 fa9b 	bl	8004ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499e:	f000 fec7 	bl	8005730 <xTaskResumeAll>
 80049a2:	e76c      	b.n	800487e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a6:	f000 fa95 	bl	8004ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049aa:	f000 fec1 	bl	8005730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3738      	adds	r7, #56	; 0x38
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b090      	sub	sp, #64	; 0x40
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <xQueueGenericSendFromISR+0x3c>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <xQueueGenericSendFromISR+0x40>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <xQueueGenericSendFromISR+0x42>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d103      	bne.n	8004a26 <xQueueGenericSendFromISR+0x6a>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <xQueueGenericSendFromISR+0x6e>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xQueueGenericSendFromISR+0x70>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	623b      	str	r3, [r7, #32]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a46:	f002 f887 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <xQueueGenericSendFromISR+0xbc>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d12f      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a8e:	f000 f991 	bl	8004db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d112      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f857 	bl	8005b5c <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ac2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25a      	sxtb	r2, r3
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ad6:	e001      	b.n	8004adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3740      	adds	r7, #64	; 0x40
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xQueueReceive+0x30>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	623b      	str	r3, [r7, #32]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueReceive+0x3e>
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueReceive+0x42>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueReceive+0x44>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xQueueReceive+0x5e>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61fb      	str	r3, [r7, #28]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b52:	f001 f9c1 	bl	8005ed8 <xTaskGetSchedulerState>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <xQueueReceive+0x6e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <xQueueReceive+0x72>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueReceive+0x74>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueReceive+0x8e>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b82:	f001 ff07 	bl	8006994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01f      	beq.n	8004bd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b96:	f000 f977 	bl	8004e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00f      	beq.n	8004bca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	3310      	adds	r3, #16
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ffd4 	bl	8005b5c <xTaskRemoveFromEventList>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <xQueueReceive+0x1bc>)
 8004bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bca:	f001 ff13 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e069      	b.n	8004ca6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd8:	f001 ff0c 	bl	80069f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e062      	b.n	8004ca6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be6:	f107 0310 	add.w	r3, r7, #16
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f81a 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf4:	f001 fefe 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf8:	f000 fd8c 	bl	8005714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bfc:	f001 feca 	bl	8006994 <vPortEnterCritical>
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d103      	bne.n	8004c16 <xQueueReceive+0x122>
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d103      	bne.n	8004c2c <xQueueReceive+0x138>
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c2c:	f001 fee2 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c30:	1d3a      	adds	r2, r7, #4
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 f809 	bl	8005c50 <xTaskCheckForTimeOut>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d123      	bne.n	8004c8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 f997 	bl	8004f78 <prvIsQueueEmpty>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d017      	beq.n	8004c80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 ff2f 	bl	8005abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c60:	f000 f938 	bl	8004ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c64:	f000 fd64 	bl	8005730 <xTaskResumeAll>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d189      	bne.n	8004b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <xQueueReceive+0x1bc>)
 8004c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	e780      	b.n	8004b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c82:	f000 f927 	bl	8004ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c86:	f000 fd53 	bl	8005730 <xTaskResumeAll>
 8004c8a:	e77a      	b.n	8004b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8e:	f000 f921 	bl	8004ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c92:	f000 fd4d 	bl	8005730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f000 f96e 	bl	8004f78 <prvIsQueueEmpty>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f43f af6f 	beq.w	8004b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3730      	adds	r7, #48	; 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	623b      	str	r3, [r7, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <xQueueReceiveFromISR+0x3a>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueReceiveFromISR+0x3e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueReceiveFromISR+0x40>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61fb      	str	r3, [r7, #28]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d0e:	f001 ff23 	bl	8006b58 <vPortValidateInterruptPriority>
	__asm volatile
 8004d12:	f3ef 8211 	mrs	r2, BASEPRI
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61ba      	str	r2, [r7, #24]
 8004d28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02f      	beq.n	8004d9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d48:	f000 f89e 	bl	8004e88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d112      	bne.n	8004d84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	3310      	adds	r3, #16
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fef6 	bl	8005b5c <xTaskRemoveFromEventList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	b25a      	sxtb	r2, r3
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	e001      	b.n	8004d9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f383 8811 	msr	BASEPRI, r3
}
 8004da8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3738      	adds	r7, #56	; 0x38
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d14d      	bne.n	8004e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 f898 	bl	8005f14 <xTaskPriorityDisinherit>
 8004de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	e043      	b.n	8004e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d119      	bne.n	8004e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6858      	ldr	r0, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	f002 f928 	bl	8007054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d32b      	bcc.n	8004e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	e026      	b.n	8004e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68d8      	ldr	r0, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	461a      	mov	r2, r3
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	f002 f90e 	bl	8007054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	425b      	negs	r3, r3
 8004e42:	441a      	add	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d207      	bcs.n	8004e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	425b      	negs	r3, r3
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d105      	bne.n	8004e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e7e:	697b      	ldr	r3, [r7, #20]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	441a      	add	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d303      	bcc.n	8004ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68d9      	ldr	r1, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6838      	ldr	r0, [r7, #0]
 8004ec8:	f002 f8c4 	bl	8007054 <memcpy>
	}
}
 8004ecc:	bf00      	nop
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004edc:	f001 fd5a 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee8:	e011      	b.n	8004f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d012      	beq.n	8004f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fe30 	bl	8005b5c <xTaskRemoveFromEventList>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f02:	f000 ff07 	bl	8005d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dce9      	bgt.n	8004eea <prvUnlockQueue+0x16>
 8004f16:	e000      	b.n	8004f1a <prvUnlockQueue+0x46>
					break;
 8004f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	22ff      	movs	r2, #255	; 0xff
 8004f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f22:	f001 fd67 	bl	80069f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f26:	f001 fd35 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f32:	e011      	b.n	8004f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d012      	beq.n	8004f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3310      	adds	r3, #16
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fe0b 	bl	8005b5c <xTaskRemoveFromEventList>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f4c:	f000 fee2 	bl	8005d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f50:	7bbb      	ldrb	r3, [r7, #14]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dce9      	bgt.n	8004f34 <prvUnlockQueue+0x60>
 8004f60:	e000      	b.n	8004f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	22ff      	movs	r2, #255	; 0xff
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f6c:	f001 fd42 	bl	80069f4 <vPortExitCritical>
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f80:	f001 fd08 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e001      	b.n	8004f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f001 fd2d 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fac:	f001 fcf2 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d102      	bne.n	8004fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e001      	b.n	8004fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fc6:	f001 fd15 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e014      	b.n	800500e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fe4:	4a0f      	ldr	r2, [pc, #60]	; (8005024 <vQueueAddToRegistry+0x50>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ff0:	490c      	ldr	r1, [pc, #48]	; (8005024 <vQueueAddToRegistry+0x50>)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <vQueueAddToRegistry+0x50>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005006:	e006      	b.n	8005016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b07      	cmp	r3, #7
 8005012:	d9e7      	bls.n	8004fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000890 	.word	0x20000890

08005028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005038:	f001 fcac 	bl	8006994 <vPortEnterCritical>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005042:	b25b      	sxtb	r3, r3
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d103      	bne.n	8005052 <vQueueWaitForMessageRestricted+0x2a>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005058:	b25b      	sxtb	r3, r3
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d103      	bne.n	8005068 <vQueueWaitForMessageRestricted+0x40>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005068:	f001 fcc4 	bl	80069f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	3324      	adds	r3, #36	; 0x24
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fd41 	bl	8005b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f7ff ff26 	bl	8004ed4 <prvUnlockQueue>
	}
 8005088:	bf00      	nop
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08e      	sub	sp, #56	; 0x38
 8005094:	af04      	add	r7, sp, #16
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	623b      	str	r3, [r7, #32]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61fb      	str	r3, [r7, #28]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050d6:	235c      	movs	r3, #92	; 0x5c
 80050d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b5c      	cmp	r3, #92	; 0x5c
 80050de:	d00a      	beq.n	80050f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61bb      	str	r3, [r7, #24]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01e      	beq.n	800513c <xTaskCreateStatic+0xac>
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005116:	2300      	movs	r3, #0
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9302      	str	r3, [sp, #8]
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f850 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005136:	f000 f8dd 	bl	80052f4 <prvAddNewTaskToReadyList>
 800513a:	e001      	b.n	8005140 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005140:	697b      	ldr	r3, [r7, #20]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08c      	sub	sp, #48	; 0x30
 800514e:	af04      	add	r7, sp, #16
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fd3a 	bl	8006bd8 <pvPortMalloc>
 8005164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800516c:	205c      	movs	r0, #92	; 0x5c
 800516e:	f001 fd33 	bl	8006bd8 <pvPortMalloc>
 8005172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
 8005180:	e005      	b.n	800518e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f001 fdf4 	bl	8006d70 <vPortFree>
 8005188:	e001      	b.n	800518e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d017      	beq.n	80051c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	2300      	movs	r3, #0
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f80e 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b8:	69f8      	ldr	r0, [r7, #28]
 80051ba:	f000 f89b 	bl	80052f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e002      	b.n	80051ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c4:	f04f 33ff 	mov.w	r3, #4294967295
 80051c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ca:	69bb      	ldr	r3, [r7, #24]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	21a5      	movs	r1, #165	; 0xa5
 80051ee:	f001 fefd 	bl	8006fec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051fc:	3b01      	subs	r3, #1
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	617b      	str	r3, [r7, #20]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01f      	beq.n	8005272 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e012      	b.n	800525e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	7819      	ldrb	r1, [r3, #0]
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	3334      	adds	r3, #52	; 0x34
 8005248:	460a      	mov	r2, r1
 800524a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d9e9      	bls.n	8005238 <prvInitialiseNewTask+0x64>
 8005264:	e000      	b.n	8005268 <prvInitialiseNewTask+0x94>
			{
				break;
 8005266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005270:	e003      	b.n	800527a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	2b37      	cmp	r3, #55	; 0x37
 800527e:	d901      	bls.n	8005284 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005280:	2337      	movs	r3, #55	; 0x37
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	3304      	adds	r3, #4
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f8be 	bl	800441c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	3318      	adds	r3, #24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff f8b9 	bl	800441c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	69b8      	ldr	r0, [r7, #24]
 80052d4:	f001 fa2e 	bl	8006734 <pxPortInitialiseStack>
 80052d8:	4602      	mov	r2, r0
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ea:	bf00      	nop
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052fc:	f001 fb4a 	bl	8006994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005300:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 8005308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d110      	bne.n	8005342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005320:	f000 fd1c 	bl	8005d5c <prvInitialiseTaskLists>
 8005324:	e00d      	b.n	8005342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <prvAddNewTaskToReadyList+0xcc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800532e:	4b23      	ldr	r3, [pc, #140]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	429a      	cmp	r2, r3
 800533a:	d802      	bhi.n	8005342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800533c:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 800534a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800534c:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <prvAddNewTaskToReadyList+0xd4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d903      	bls.n	8005368 <prvAddNewTaskToReadyList+0x74>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <prvAddNewTaskToReadyList+0xd4>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <prvAddNewTaskToReadyList+0xd8>)
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7ff f859 	bl	8004436 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fb36 	bl	80069f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <prvAddNewTaskToReadyList+0xcc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00e      	beq.n	80053ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d207      	bcs.n	80053ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <prvAddNewTaskToReadyList+0xdc>)
 80053a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000da4 	.word	0x20000da4
 80053bc:	200008d0 	.word	0x200008d0
 80053c0:	20000db0 	.word	0x20000db0
 80053c4:	20000dc0 	.word	0x20000dc0
 80053c8:	20000dac 	.word	0x20000dac
 80053cc:	200008d4 	.word	0x200008d4
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <vTaskDelay+0x60>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <vTaskDelay+0x30>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60bb      	str	r3, [r7, #8]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005404:	f000 f986 	bl	8005714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fdf0 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005410:	f000 f98e 	bl	8005730 <xTaskResumeAll>
 8005414:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <vTaskDelay+0x64>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000dcc 	.word	0x20000dcc
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005444:	f001 faa6 	bl	8006994 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <vTaskSuspend+0x18>
 800544e:	4b30      	ldr	r3, [pc, #192]	; (8005510 <vTaskSuspend+0xd4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	e000      	b.n	8005456 <vTaskSuspend+0x1a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3304      	adds	r3, #4
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff f847 	bl	80044f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3318      	adds	r3, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f83e 	bl	80044f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4826      	ldr	r0, [pc, #152]	; (8005514 <vTaskSuspend+0xd8>)
 800547c:	f7fe ffdb 	bl	8004436 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d103      	bne.n	8005494 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005494:	f001 faae 	bl	80069f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005498:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <vTaskSuspend+0xdc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80054a0:	f001 fa78 	bl	8006994 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80054a4:	f000 fcf8 	bl	8005e98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80054a8:	f001 faa4 	bl	80069f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80054ac:	4b18      	ldr	r3, [pc, #96]	; (8005510 <vTaskSuspend+0xd4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d127      	bne.n	8005506 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <vTaskSuspend+0xdc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d017      	beq.n	80054ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80054be:	4b17      	ldr	r3, [pc, #92]	; (800551c <vTaskSuspend+0xe0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <vTaskSuspend+0xa0>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <vTaskSuspend+0xe4>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ec:	e00b      	b.n	8005506 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <vTaskSuspend+0xd8>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <vTaskSuspend+0xe8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d103      	bne.n	8005502 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <vTaskSuspend+0xd4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
	}
 8005500:	e001      	b.n	8005506 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005502:	f000 fa7d 	bl	8005a00 <vTaskSwitchContext>
	}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200008d0 	.word	0x200008d0
 8005514:	20000d90 	.word	0x20000d90
 8005518:	20000db0 	.word	0x20000db0
 800551c:	20000dcc 	.word	0x20000dcc
 8005520:	e000ed04 	.word	0xe000ed04
 8005524:	20000da4 	.word	0x20000da4

08005528 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <prvTaskIsTaskSuspended+0x5c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10a      	bne.n	8005574 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <prvTaskIsTaskSuspended+0x60>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d005      	beq.n	8005574 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005570:	2301      	movs	r3, #1
 8005572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005574:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000d90 	.word	0x20000d90
 8005588:	20000d64 	.word	0x20000d64

0800558c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <vTaskResume+0x28>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80055b4:	4b20      	ldr	r3, [pc, #128]	; (8005638 <vTaskResume+0xac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d038      	beq.n	8005630 <vTaskResume+0xa4>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d035      	beq.n	8005630 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80055c4:	f001 f9e6 	bl	8006994 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ffad 	bl	8005528 <prvTaskIsTaskSuspended>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02b      	beq.n	800562c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe ff89 	bl	80044f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	4b16      	ldr	r3, [pc, #88]	; (800563c <vTaskResume+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d903      	bls.n	80055f2 <vTaskResume+0x66>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a13      	ldr	r2, [pc, #76]	; (800563c <vTaskResume+0xb0>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <vTaskResume+0xb4>)
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7fe ff14 	bl	8004436 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <vTaskResume+0xac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d307      	bcc.n	800562c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <vTaskResume+0xb8>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800562c:	f001 f9e2 	bl	80069f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	200008d0 	.word	0x200008d0
 800563c:	20000dac 	.word	0x20000dac
 8005640:	200008d4 	.word	0x200008d4
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005656:	463a      	mov	r2, r7
 8005658:	1d39      	adds	r1, r7, #4
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fe88 	bl	8004374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	9202      	str	r2, [sp, #8]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	2300      	movs	r3, #0
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	460a      	mov	r2, r1
 8005676:	4921      	ldr	r1, [pc, #132]	; (80056fc <vTaskStartScheduler+0xb4>)
 8005678:	4821      	ldr	r0, [pc, #132]	; (8005700 <vTaskStartScheduler+0xb8>)
 800567a:	f7ff fd09 	bl	8005090 <xTaskCreateStatic>
 800567e:	4603      	mov	r3, r0
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <vTaskStartScheduler+0xbc>)
 8005682:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <vTaskStartScheduler+0xbc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800568c:	2301      	movs	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e001      	b.n	8005696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800569c:	f000 fcfc 	bl	8006098 <xTimerCreateTimerTask>
 80056a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d116      	bne.n	80056d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	613b      	str	r3, [r7, #16]
}
 80056ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <vTaskStartScheduler+0xc0>)
 80056be:	f04f 32ff 	mov.w	r2, #4294967295
 80056c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <vTaskStartScheduler+0xc4>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056ca:	4b11      	ldr	r3, [pc, #68]	; (8005710 <vTaskStartScheduler+0xc8>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056d0:	f001 f8be 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056d4:	e00e      	b.n	80056f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d10a      	bne.n	80056f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <vTaskStartScheduler+0xaa>
}
 80056f4:	bf00      	nop
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	08007978 	.word	0x08007978
 8005700:	08005d2d 	.word	0x08005d2d
 8005704:	20000dc8 	.word	0x20000dc8
 8005708:	20000dc4 	.word	0x20000dc4
 800570c:	20000db0 	.word	0x20000db0
 8005710:	20000da8 	.word	0x20000da8

08005714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <vTaskSuspendAll+0x18>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a03      	ldr	r2, [pc, #12]	; (800572c <vTaskSuspendAll+0x18>)
 8005720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005722:	bf00      	nop
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20000dcc 	.word	0x20000dcc

08005730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800573e:	4b42      	ldr	r3, [pc, #264]	; (8005848 <xTaskResumeAll+0x118>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xTaskResumeAll+0x2c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	603b      	str	r3, [r7, #0]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800575c:	f001 f91a 	bl	8006994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <xTaskResumeAll+0x118>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a38      	ldr	r2, [pc, #224]	; (8005848 <xTaskResumeAll+0x118>)
 8005768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <xTaskResumeAll+0x118>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d162      	bne.n	8005838 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <xTaskResumeAll+0x11c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d05e      	beq.n	8005838 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800577a:	e02f      	b.n	80057dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <xTaskResumeAll+0x120>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3318      	adds	r3, #24
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe feb1 	bl	80044f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe feac 	bl	80044f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <xTaskResumeAll+0x124>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d903      	bls.n	80057ac <xTaskResumeAll+0x7c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <xTaskResumeAll+0x124>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <xTaskResumeAll+0x128>)
 80057ba:	441a      	add	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fe fe37 	bl	8004436 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <xTaskResumeAll+0x12c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <xTaskResumeAll+0x130>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057dc:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <xTaskResumeAll+0x120>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1cb      	bne.n	800577c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ea:	f000 fb55 	bl	8005e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <xTaskResumeAll+0x134>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057fa:	f000 f847 	bl	800588c <xTaskIncrementTick>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005804:	4b16      	ldr	r3, [pc, #88]	; (8005860 <xTaskResumeAll+0x130>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3b01      	subs	r3, #1
 800580e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f1      	bne.n	80057fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <xTaskResumeAll+0x134>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xTaskResumeAll+0x130>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <xTaskResumeAll+0x138>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005838:	f001 f8dc 	bl	80069f4 <vPortExitCritical>

	return xAlreadyYielded;
 800583c:	68bb      	ldr	r3, [r7, #8]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000dcc 	.word	0x20000dcc
 800584c:	20000da4 	.word	0x20000da4
 8005850:	20000d64 	.word	0x20000d64
 8005854:	20000dac 	.word	0x20000dac
 8005858:	200008d4 	.word	0x200008d4
 800585c:	200008d0 	.word	0x200008d0
 8005860:	20000db8 	.word	0x20000db8
 8005864:	20000db4 	.word	0x20000db4
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <xTaskGetTickCount+0x1c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005878:	687b      	ldr	r3, [r7, #4]
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000da8 	.word	0x20000da8

0800588c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005896:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <xTaskIncrementTick+0x148>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 808f 	bne.w	80059be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a0:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <xTaskIncrementTick+0x14c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a8:	4a4b      	ldr	r2, [pc, #300]	; (80059d8 <xTaskIncrementTick+0x14c>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d120      	bne.n	80058f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b4:	4b49      	ldr	r3, [pc, #292]	; (80059dc <xTaskIncrementTick+0x150>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	603b      	str	r3, [r7, #0]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xTaskIncrementTick+0x46>
 80058d4:	4b41      	ldr	r3, [pc, #260]	; (80059dc <xTaskIncrementTick+0x150>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3f      	ldr	r2, [pc, #252]	; (80059dc <xTaskIncrementTick+0x150>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4a3f      	ldr	r2, [pc, #252]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	f000 fad1 	bl	8005e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f6:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <xTaskIncrementTick+0x15c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d349      	bcc.n	8005994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <xTaskIncrementTick+0x150>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590a:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <xTaskIncrementTick+0x15c>)
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	601a      	str	r2, [r3, #0]
					break;
 8005912:	e03f      	b.n	8005994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <xTaskIncrementTick+0x150>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d203      	bcs.n	8005934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800592c:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <xTaskIncrementTick+0x15c>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005932:	e02f      	b.n	8005994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fdd9 	bl	80044f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3318      	adds	r3, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fdd0 	bl	80044f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <xTaskIncrementTick+0x160>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d903      	bls.n	8005964 <xTaskIncrementTick+0xd8>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a22      	ldr	r2, [pc, #136]	; (80059ec <xTaskIncrementTick+0x160>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <xTaskIncrementTick+0x164>)
 8005972:	441a      	add	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3304      	adds	r3, #4
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7fe fd5b 	bl	8004436 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <xTaskIncrementTick+0x168>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	429a      	cmp	r2, r3
 800598c:	d3b8      	bcc.n	8005900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005992:	e7b5      	b.n	8005900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <xTaskIncrementTick+0x168>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4915      	ldr	r1, [pc, #84]	; (80059f0 <xTaskIncrementTick+0x164>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d901      	bls.n	80059b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <xTaskIncrementTick+0x16c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e004      	b.n	80059c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <xTaskIncrementTick+0x170>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <xTaskIncrementTick+0x170>)
 80059c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c8:	697b      	ldr	r3, [r7, #20]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000dcc 	.word	0x20000dcc
 80059d8:	20000da8 	.word	0x20000da8
 80059dc:	20000d5c 	.word	0x20000d5c
 80059e0:	20000d60 	.word	0x20000d60
 80059e4:	20000dbc 	.word	0x20000dbc
 80059e8:	20000dc4 	.word	0x20000dc4
 80059ec:	20000dac 	.word	0x20000dac
 80059f0:	200008d4 	.word	0x200008d4
 80059f4:	200008d0 	.word	0x200008d0
 80059f8:	20000db8 	.word	0x20000db8
 80059fc:	20000db4 	.word	0x20000db4

08005a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <vTaskSwitchContext+0xa8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <vTaskSwitchContext+0xac>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a14:	e041      	b.n	8005a9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a16:	4b25      	ldr	r3, [pc, #148]	; (8005aac <vTaskSwitchContext+0xac>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e010      	b.n	8005a46 <vTaskSwitchContext+0x46>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vTaskSwitchContext+0x3e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	491b      	ldr	r1, [pc, #108]	; (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0e4      	beq.n	8005a24 <vTaskSwitchContext+0x24>
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a66:	4413      	add	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <vTaskSwitchContext+0x8a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <vTaskSwitchContext+0xb8>)
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6013      	str	r3, [r2, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000dcc 	.word	0x20000dcc
 8005aac:	20000db8 	.word	0x20000db8
 8005ab0:	20000dac 	.word	0x20000dac
 8005ab4:	200008d4 	.word	0x200008d4
 8005ab8:	200008d0 	.word	0x200008d0

08005abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60fb      	str	r3, [r7, #12]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <vTaskPlaceOnEventList+0x44>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fe fcc7 	bl	800447e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005af0:	2101      	movs	r1, #1
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	f000 fa7c 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200008d0 	.word	0x200008d0

08005b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617b      	str	r3, [r7, #20]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3318      	adds	r3, #24
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7fe fc7e 	bl	8004436 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295
 8005b44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f000 fa51 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
	}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200008d0 	.word	0x200008d0

08005b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fcaf 	bl	80044f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <xTaskRemoveFromEventList+0xb0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d11d      	bne.n	8005bd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fca6 	bl	80044f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d903      	bls.n	8005bb8 <xTaskRemoveFromEventList+0x5c>
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <xTaskRemoveFromEventList+0xb8>)
 8005bc6:	441a      	add	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fe fc31 	bl	8004436 <vListInsertEnd>
 8005bd4:	e005      	b.n	8005be2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4619      	mov	r1, r3
 8005bdc:	480e      	ldr	r0, [pc, #56]	; (8005c18 <xTaskRemoveFromEventList+0xbc>)
 8005bde:	f7fe fc2a 	bl	8004436 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <xTaskRemoveFromEventList+0xc0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d905      	bls.n	8005bfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <xTaskRemoveFromEventList+0xc4>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e001      	b.n	8005c00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c00:	697b      	ldr	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000dcc 	.word	0x20000dcc
 8005c10:	20000dac 	.word	0x20000dac
 8005c14:	200008d4 	.word	0x200008d4
 8005c18:	20000d64 	.word	0x20000d64
 8005c1c:	200008d0 	.word	0x200008d0
 8005c20:	20000db8 	.word	0x20000db8

08005c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <vTaskInternalSetTimeOutState+0x24>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <vTaskInternalSetTimeOutState+0x28>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20000dbc 	.word	0x20000dbc
 8005c4c:	20000da8 	.word	0x20000da8

08005c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c92:	f000 fe7f 	bl	8006994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <xTaskCheckForTimeOut+0xbc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d102      	bne.n	8005cb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e023      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <xTaskCheckForTimeOut+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d007      	beq.n	8005cd2 <xTaskCheckForTimeOut+0x82>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e015      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d20b      	bcs.n	8005cf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff9b 	bl	8005c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e004      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cfe:	f000 fe79 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8005d02:	69fb      	ldr	r3, [r7, #28]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000da8 	.word	0x20000da8
 8005d10:	20000dbc 	.word	0x20000dbc

08005d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <vTaskMissedYield+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20000db8 	.word	0x20000db8

08005d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d34:	f000 f852 	bl	8005ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <prvIdleTask+0x28>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d9f9      	bls.n	8005d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <prvIdleTask+0x2c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d50:	e7f0      	b.n	8005d34 <prvIdleTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	200008d4 	.word	0x200008d4
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e00c      	b.n	8005d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <prvInitialiseTaskLists+0x60>)
 8005d74:	4413      	add	r3, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fb30 	bl	80043dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b37      	cmp	r3, #55	; 0x37
 8005d86:	d9ef      	bls.n	8005d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d88:	480d      	ldr	r0, [pc, #52]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	f7fe fb27 	bl	80043dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d8e:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005d90:	f7fe fb24 	bl	80043dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d94:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <prvInitialiseTaskLists+0x6c>)
 8005d96:	f7fe fb21 	bl	80043dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9a:	480c      	ldr	r0, [pc, #48]	; (8005dcc <prvInitialiseTaskLists+0x70>)
 8005d9c:	f7fe fb1e 	bl	80043dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da0:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <prvInitialiseTaskLists+0x74>)
 8005da2:	f7fe fb1b 	bl	80043dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <prvInitialiseTaskLists+0x78>)
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvInitialiseTaskLists+0x7c>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200008d4 	.word	0x200008d4
 8005dc0:	20000d34 	.word	0x20000d34
 8005dc4:	20000d48 	.word	0x20000d48
 8005dc8:	20000d64 	.word	0x20000d64
 8005dcc:	20000d78 	.word	0x20000d78
 8005dd0:	20000d90 	.word	0x20000d90
 8005dd4:	20000d5c 	.word	0x20000d5c
 8005dd8:	20000d60 	.word	0x20000d60

08005ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de2:	e019      	b.n	8005e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de4:	f000 fdd6 	bl	8006994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fb7b 	bl	80044f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e0e:	f000 fdf1 	bl	80069f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f810 	bl	8005e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000d78 	.word	0x20000d78
 8005e30:	20000da4 	.word	0x20000da4
 8005e34:	20000d8c 	.word	0x20000d8c

08005e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d108      	bne.n	8005e5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ff8e 	bl	8006d70 <vPortFree>
				vPortFree( pxTCB );
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 ff8b 	bl	8006d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e5a:	e018      	b.n	8005e8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d103      	bne.n	8005e6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ff82 	bl	8006d70 <vPortFree>
	}
 8005e6c:	e00f      	b.n	8005e8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d00a      	beq.n	8005e8e <prvDeleteTCB+0x56>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	60fb      	str	r3, [r7, #12]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <prvDeleteTCB+0x54>
	}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <prvResetNextTaskUnblockTime+0x38>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb0:	e008      	b.n	8005ec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <prvResetNextTaskUnblockTime+0x38>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000d5c 	.word	0x20000d5c
 8005ed4:	20000dc4 	.word	0x20000dc4

08005ed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <xTaskGetSchedulerState+0x34>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	e008      	b.n	8005efe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eec:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <xTaskGetSchedulerState+0x38>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	e001      	b.n	8005efe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005efe:	687b      	ldr	r3, [r7, #4]
	}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000db0 	.word	0x20000db0
 8005f10:	20000dcc 	.word	0x20000dcc

08005f14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d056      	beq.n	8005fd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <xTaskPriorityDisinherit+0xd0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d00a      	beq.n	8005f4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60fb      	str	r3, [r7, #12]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60bb      	str	r3, [r7, #8]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	1e5a      	subs	r2, r3, #1
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d02c      	beq.n	8005fd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d128      	bne.n	8005fd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fab0 	bl	80044f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <xTaskPriorityDisinherit+0xd4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <xTaskPriorityDisinherit+0xa4>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <xTaskPriorityDisinherit+0xd4>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a09      	ldr	r2, [pc, #36]	; (8005fec <xTaskPriorityDisinherit+0xd8>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe fa31 	bl	8004436 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fd8:	697b      	ldr	r3, [r7, #20]
	}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200008d0 	.word	0x200008d0
 8005fe8:	20000dac 	.word	0x20000dac
 8005fec:	200008d4 	.word	0x200008d4

08005ff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ffa:	4b21      	ldr	r3, [pc, #132]	; (8006080 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006000:	4b20      	ldr	r3, [pc, #128]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3304      	adds	r3, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fa72 	bl	80044f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d10a      	bne.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4819      	ldr	r0, [pc, #100]	; (8006088 <prvAddCurrentTaskToDelayedList+0x98>)
 8006024:	f7fe fa07 	bl	8004436 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006028:	e026      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006032:	4b14      	ldr	r3, [pc, #80]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d209      	bcs.n	8006056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7fe fa15 	bl	800447e <vListInsert>
}
 8006054:	e010      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006056:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7fe fa0b 	bl	800447e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d202      	bcs.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000da8 	.word	0x20000da8
 8006084:	200008d0 	.word	0x200008d0
 8006088:	20000d90 	.word	0x20000d90
 800608c:	20000d60 	.word	0x20000d60
 8006090:	20000d5c 	.word	0x20000d5c
 8006094:	20000dc4 	.word	0x20000dc4

08006098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060a2:	f000 fb07 	bl	80066b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <xTimerCreateTimerTask+0x80>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d021      	beq.n	80060f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060b6:	1d3a      	adds	r2, r7, #4
 80060b8:	f107 0108 	add.w	r1, r7, #8
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fe f971 	bl	80043a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	9202      	str	r2, [sp, #8]
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	2302      	movs	r3, #2
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	460a      	mov	r2, r1
 80060d8:	4910      	ldr	r1, [pc, #64]	; (800611c <xTimerCreateTimerTask+0x84>)
 80060da:	4811      	ldr	r0, [pc, #68]	; (8006120 <xTimerCreateTimerTask+0x88>)
 80060dc:	f7fe ffd8 	bl	8005090 <xTaskCreateStatic>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4a10      	ldr	r2, [pc, #64]	; (8006124 <xTimerCreateTimerTask+0x8c>)
 80060e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <xTimerCreateTimerTask+0x8c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	613b      	str	r3, [r7, #16]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800610e:	697b      	ldr	r3, [r7, #20]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000e00 	.word	0x20000e00
 800611c:	08007980 	.word	0x08007980
 8006120:	0800625d 	.word	0x0800625d
 8006124:	20000e04 	.word	0x20000e04

08006128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006156:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <xTimerGenericCommand+0x98>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02a      	beq.n	80061b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b05      	cmp	r3, #5
 800616e:	dc18      	bgt.n	80061a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006170:	f7ff feb2 	bl	8005ed8 <xTaskGetSchedulerState>
 8006174:	4603      	mov	r3, r0
 8006176:	2b02      	cmp	r3, #2
 8006178:	d109      	bne.n	800618e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <xTimerGenericCommand+0x98>)
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f107 0110 	add.w	r1, r7, #16
 8006182:	2300      	movs	r3, #0
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	f7fe fb1b 	bl	80047c0 <xQueueGenericSend>
 800618a:	6278      	str	r0, [r7, #36]	; 0x24
 800618c:	e012      	b.n	80061b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <xTimerGenericCommand+0x98>)
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f107 0110 	add.w	r1, r7, #16
 8006196:	2300      	movs	r3, #0
 8006198:	2200      	movs	r2, #0
 800619a:	f7fe fb11 	bl	80047c0 <xQueueGenericSend>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24
 80061a0:	e008      	b.n	80061b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <xTimerGenericCommand+0x98>)
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f107 0110 	add.w	r1, r7, #16
 80061aa:	2300      	movs	r3, #0
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	f7fe fc05 	bl	80049bc <xQueueGenericSendFromISR>
 80061b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3728      	adds	r7, #40	; 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000e00 	.word	0x20000e00

080061c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ce:	4b22      	ldr	r3, [pc, #136]	; (8006258 <prvProcessExpiredTimer+0x94>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe f987 	bl	80044f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d022      	beq.n	8006236 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	18d1      	adds	r1, r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6978      	ldr	r0, [r7, #20]
 80061fe:	f000 f8d1 	bl	80063a4 <prvInsertTimerInActiveList>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01f      	beq.n	8006248 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006208:	2300      	movs	r3, #0
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2300      	movs	r3, #0
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	2100      	movs	r1, #0
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f7ff ff88 	bl	8006128 <xTimerGenericCommand>
 8006218:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d113      	bne.n	8006248 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	b2da      	uxtb	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	6978      	ldr	r0, [r7, #20]
 800624e:	4798      	blx	r3
}
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000df8 	.word	0x20000df8

0800625c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f857 	bl	800631c <prvGetNextExpireTime>
 800626e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4619      	mov	r1, r3
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f803 	bl	8006280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800627a:	f000 f8d5 	bl	8006428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800627e:	e7f1      	b.n	8006264 <prvTimerTask+0x8>

08006280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800628a:	f7ff fa43 	bl	8005714 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f866 	bl	8006364 <prvSampleTimeNow>
 8006298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d130      	bne.n	8006302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d806      	bhi.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ae:	f7ff fa3f 	bl	8005730 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff85 	bl	80061c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ba:	e024      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <prvProcessTimerOrBlockTask+0x90>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <prvProcessTimerOrBlockTask+0x50>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <prvProcessTimerOrBlockTask+0x52>
 80062d0:	2300      	movs	r3, #0
 80062d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <prvProcessTimerOrBlockTask+0x94>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fe fea1 	bl	8005028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062e6:	f7ff fa23 	bl	8005730 <xTaskResumeAll>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <prvProcessTimerOrBlockTask+0x98>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
}
 8006300:	e001      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006302:	f7ff fa15 	bl	8005730 <xTaskResumeAll>
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000dfc 	.word	0x20000dfc
 8006314:	20000e00 	.word	0x20000e00
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <prvGetNextExpireTime+0x44>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <prvGetNextExpireTime+0x16>
 800632e:	2201      	movs	r2, #1
 8006330:	e000      	b.n	8006334 <prvGetNextExpireTime+0x18>
 8006332:	2200      	movs	r2, #0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <prvGetNextExpireTime+0x44>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e001      	b.n	8006350 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000df8 	.word	0x20000df8

08006364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800636c:	f7ff fa7e 	bl	800586c <xTaskGetTickCount>
 8006370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <prvSampleTimeNow+0x3c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d205      	bcs.n	8006388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800637c:	f000 f936 	bl	80065ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e002      	b.n	800638e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800638e:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <prvSampleTimeNow+0x3c>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000e08 	.word	0x20000e08

080063a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d812      	bhi.n	80063f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d302      	bcc.n	80063de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e01b      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <prvInsertTimerInActiveList+0x7c>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7fe f848 	bl	800447e <vListInsert>
 80063ee:	e012      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d206      	bcs.n	8006406 <prvInsertTimerInActiveList+0x62>
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e007      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006406:	4b07      	ldr	r3, [pc, #28]	; (8006424 <prvInsertTimerInActiveList+0x80>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fe f834 	bl	800447e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006416:	697b      	ldr	r3, [r7, #20]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000dfc 	.word	0x20000dfc
 8006424:	20000df8 	.word	0x20000df8

08006428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08e      	sub	sp, #56	; 0x38
 800642c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800642e:	e0ca      	b.n	80065c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	da18      	bge.n	8006468 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	3304      	adds	r3, #4
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	61fb      	str	r3, [r7, #28]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645e:	6850      	ldr	r0, [r2, #4]
 8006460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006462:	6892      	ldr	r2, [r2, #8]
 8006464:	4611      	mov	r1, r2
 8006466:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f2c0 80ab 	blt.w	80065c6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe f835 	bl	80044f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006486:	463b      	mov	r3, r7
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ff6b 	bl	8006364 <prvSampleTimeNow>
 800648e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b09      	cmp	r3, #9
 8006494:	f200 8096 	bhi.w	80065c4 <prvProcessReceivedCommands+0x19c>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <prvProcessReceivedCommands+0x78>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064c9 	.word	0x080064c9
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	08006551 	.word	0x08006551
 80064b4:	0800659b 	.word	0x0800659b
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064c9 	.word	0x080064c9
 80064c0:	0800653d 	.word	0x0800653d
 80064c4:	08006551 	.word	0x08006551
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	18d1      	adds	r1, r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e8:	f7ff ff5c 	bl	80063a4 <prvInsertTimerInActiveList>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d069      	beq.n	80065c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05e      	beq.n	80065c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	441a      	add	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	2100      	movs	r1, #0
 8006518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651a:	f7ff fe05 	bl	8006128 <xTimerGenericCommand>
 800651e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d14f      	bne.n	80065c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	61bb      	str	r3, [r7, #24]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800654e:	e03a      	b.n	80065c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	617b      	str	r3, [r7, #20]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	18d1      	adds	r1, r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006594:	f7ff ff06 	bl	80063a4 <prvInsertTimerInActiveList>
					break;
 8006598:	e015      	b.n	80065c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065aa:	f000 fbe1 	bl	8006d70 <vPortFree>
 80065ae:	e00a      	b.n	80065c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065c2:	e000      	b.n	80065c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80065c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <prvProcessReceivedCommands+0x1c0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	1d39      	adds	r1, r7, #4
 80065cc:	2200      	movs	r2, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fa90 	bl	8004af4 <xQueueReceive>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f47f af2a 	bne.w	8006430 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3730      	adds	r7, #48	; 0x30
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000e00 	.word	0x20000e00

080065ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065f2:	e048      	b.n	8006686 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <prvSwitchTimerLists+0xc0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fe:	4b2b      	ldr	r3, [pc, #172]	; (80066ac <prvSwitchTimerLists+0xc0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3304      	adds	r3, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd ff6f 	bl	80044f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02e      	beq.n	8006686 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4413      	add	r3, r2
 8006630:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d90e      	bls.n	8006658 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <prvSwitchTimerLists+0xc0>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fd ff14 	bl	800447e <vListInsert>
 8006656:	e016      	b.n	8006686 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006658:	2300      	movs	r3, #0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	2100      	movs	r1, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fd60 	bl	8006128 <xTimerGenericCommand>
 8006668:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	603b      	str	r3, [r7, #0]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <prvSwitchTimerLists+0xc0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1b1      	bne.n	80065f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <prvSwitchTimerLists+0xc0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <prvSwitchTimerLists+0xc4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a04      	ldr	r2, [pc, #16]	; (80066ac <prvSwitchTimerLists+0xc0>)
 800669c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800669e:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <prvSwitchTimerLists+0xc4>)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000df8 	.word	0x20000df8
 80066b0:	20000dfc 	.word	0x20000dfc

080066b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066ba:	f000 f96b 	bl	8006994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066be:	4b15      	ldr	r3, [pc, #84]	; (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d120      	bne.n	8006708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066c6:	4814      	ldr	r0, [pc, #80]	; (8006718 <prvCheckForValidListAndQueue+0x64>)
 80066c8:	f7fd fe88 	bl	80043dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066cc:	4813      	ldr	r0, [pc, #76]	; (800671c <prvCheckForValidListAndQueue+0x68>)
 80066ce:	f7fd fe85 	bl	80043dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066d2:	4b13      	ldr	r3, [pc, #76]	; (8006720 <prvCheckForValidListAndQueue+0x6c>)
 80066d4:	4a10      	ldr	r2, [pc, #64]	; (8006718 <prvCheckForValidListAndQueue+0x64>)
 80066d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066d8:	4b12      	ldr	r3, [pc, #72]	; (8006724 <prvCheckForValidListAndQueue+0x70>)
 80066da:	4a10      	ldr	r2, [pc, #64]	; (800671c <prvCheckForValidListAndQueue+0x68>)
 80066dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <prvCheckForValidListAndQueue+0x74>)
 80066e4:	4a11      	ldr	r2, [pc, #68]	; (800672c <prvCheckForValidListAndQueue+0x78>)
 80066e6:	2110      	movs	r1, #16
 80066e8:	200a      	movs	r0, #10
 80066ea:	f7fd ff93 	bl	8004614 <xQueueGenericCreateStatic>
 80066ee:	4603      	mov	r3, r0
 80066f0:	4a08      	ldr	r2, [pc, #32]	; (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	490b      	ldr	r1, [pc, #44]	; (8006730 <prvCheckForValidListAndQueue+0x7c>)
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fc66 	bl	8004fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006708:	f000 f974 	bl	80069f4 <vPortExitCritical>
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000e00 	.word	0x20000e00
 8006718:	20000dd0 	.word	0x20000dd0
 800671c:	20000de4 	.word	0x20000de4
 8006720:	20000df8 	.word	0x20000df8
 8006724:	20000dfc 	.word	0x20000dfc
 8006728:	20000eac 	.word	0x20000eac
 800672c:	20000e0c 	.word	0x20000e0c
 8006730:	08007988 	.word	0x08007988

08006734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3b04      	subs	r3, #4
 8006744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b04      	subs	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3b04      	subs	r3, #4
 8006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006764:	4a0c      	ldr	r2, [pc, #48]	; (8006798 <pxPortInitialiseStack+0x64>)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b14      	subs	r3, #20
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f06f 0202 	mvn.w	r2, #2
 8006782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b20      	subs	r3, #32
 8006788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	0800679d 	.word	0x0800679d

0800679c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <prvTaskExitError+0x54>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d00a      	beq.n	80067c6 <prvTaskExitError+0x2a>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <prvTaskExitError+0x28>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60bb      	str	r3, [r7, #8]
}
 80067d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067da:	bf00      	nop
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0fc      	beq.n	80067dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	2000000c 	.word	0x2000000c
	...

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <xPortStartScheduler+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <xPortStartScheduler+0x120>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10a      	bne.n	8006896 <xPortStartScheduler+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <xPortStartScheduler+0x12c>)
 8006898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xPortStartScheduler+0x130>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <xPortStartScheduler+0x134>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <xPortStartScheduler+0x134>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <xPortStartScheduler+0x134>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00a      	beq.n	8006908 <xPortStartScheduler+0xb8>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xPortStartScheduler+0x134>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <xPortStartScheduler+0x134>)
 8006910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xPortStartScheduler+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <xPortStartScheduler+0x134>)
 800691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <xPortStartScheduler+0x138>)
 800692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xPortStartScheduler+0x138>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <xPortStartScheduler+0x138>)
 8006938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800693e:	f000 f8dd 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <xPortStartScheduler+0x13c>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006948:	f000 f8fc 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xPortStartScheduler+0x140>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xPortStartScheduler+0x140>)
 8006952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006958:	f7ff ff66 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695c:	f7ff f850 	bl	8005a00 <vTaskSwitchContext>
	prvTaskExitError();
 8006960:	f7ff ff1c 	bl	800679c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	410fc271 	.word	0x410fc271
 8006978:	410fc270 	.word	0x410fc270
 800697c:	e000e400 	.word	0xe000e400
 8006980:	20000efc 	.word	0x20000efc
 8006984:	20000f00 	.word	0x20000f00
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	2000000c 	.word	0x2000000c
 8006990:	e000ef34 	.word	0xe000ef34

08006994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <vPortEnterCritical+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <vPortEnterCritical+0x58>)
 80069b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <vPortEnterCritical+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10f      	bne.n	80069e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortEnterCritical+0x5c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vPortEnterCritical+0x4a>
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <vPortExitCritical+0x50>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vPortExitCritical+0x24>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <vPortExitCritical+0x50>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <vPortExitCritical+0x50>)
 8006a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <vPortExitCritical+0x42>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe ffbe 	bl	8005a00 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fedb 	bl	800588c <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d914      	bls.n	8006b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <vPortValidateInterruptPriority+0x70>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20a      	bcs.n	8006b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d90a      	bls.n	8006bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vPortValidateInterruptPriority+0x60>
	}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000e3f0 	.word	0xe000e3f0
 8006bcc:	20000efc 	.word	0x20000efc
 8006bd0:	e000ed0c 	.word	0xe000ed0c
 8006bd4:	20000f00 	.word	0x20000f00

08006bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be4:	f7fe fd96 	bl	8005714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <pvPortMalloc+0x180>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf0:	f000 f920 	bl	8006e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <pvPortMalloc+0x184>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8093 	bne.w	8006d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01d      	beq.n	8006c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <pvPortMalloc+0x6c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06e      	beq.n	8006d28 <pvPortMalloc+0x150>
 8006c4a:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <pvPortMalloc+0x188>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d869      	bhi.n	8006d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c54:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c58:	4b42      	ldr	r3, [pc, #264]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5e:	e004      	b.n	8006c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <pvPortMalloc+0xa4>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <pvPortMalloc+0x180>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d050      	beq.n	8006d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d91f      	bls.n	8006ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce2:	69b8      	ldr	r0, [r7, #24]
 8006ce4:	f000 f908 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <pvPortMalloc+0x188>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <pvPortMalloc+0x190>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d203      	bcs.n	8006d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d02:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <pvPortMalloc+0x188>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x190>)
 8006d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <pvPortMalloc+0x194>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <pvPortMalloc+0x194>)
 8006d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d28:	f7fe fd02 	bl	8005730 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <pvPortMalloc+0x174>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <pvPortMalloc+0x172>
	return pvReturn;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20004b0c 	.word	0x20004b0c
 8006d5c:	20004b20 	.word	0x20004b20
 8006d60:	20004b10 	.word	0x20004b10
 8006d64:	20004b04 	.word	0x20004b04
 8006d68:	20004b14 	.word	0x20004b14
 8006d6c:	20004b18 	.word	0x20004b18

08006d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04d      	beq.n	8006e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d82:	2308      	movs	r3, #8
 8006d84:	425b      	negs	r3, r3
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <vPortFree+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vPortFree+0x44>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <vPortFree+0x62>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <vPortFree+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <vPortFree+0xb8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006df8:	f7fe fc8c 	bl	8005714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <vPortFree+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <vPortFree+0xbc>)
 8006e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f000 f874 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <vPortFree+0xc0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vPortFree+0xc0>)
 8006e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e1a:	f7fe fc89 	bl	8005730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20004b20 	.word	0x20004b20
 8006e2c:	20004b10 	.word	0x20004b10
 8006e30:	20004b1c 	.word	0x20004b1c

08006e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <prvHeapInit+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <prvHeapInit+0xac>)
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e80:	2208      	movs	r2, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvHeapInit+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvHeapInit+0xb4>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <prvHeapInit+0xb8>)
 8006ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <prvHeapInit+0xbc>)
 8006eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <prvHeapInit+0xc0>)
 8006ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000f04 	.word	0x20000f04
 8006ee4:	20004b04 	.word	0x20004b04
 8006ee8:	20004b0c 	.word	0x20004b0c
 8006eec:	20004b14 	.word	0x20004b14
 8006ef0:	20004b10 	.word	0x20004b10
 8006ef4:	20004b20 	.word	0x20004b20

08006ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <prvInsertBlockIntoFreeList+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e002      	b.n	8006f0c <prvInsertBlockIntoFreeList+0x14>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8f7      	bhi.n	8006f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d108      	bne.n	8006f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d118      	bne.n	8006f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00d      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e008      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e003      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d002      	beq.n	8006f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20004b04 	.word	0x20004b04
 8006fa8:	20004b0c 	.word	0x20004b0c

08006fac <siprintf>:
 8006fac:	b40e      	push	{r1, r2, r3}
 8006fae:	b500      	push	{lr}
 8006fb0:	b09c      	sub	sp, #112	; 0x70
 8006fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fb4:	9002      	str	r0, [sp, #8]
 8006fb6:	9006      	str	r0, [sp, #24]
 8006fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fbc:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <siprintf+0x38>)
 8006fbe:	9107      	str	r1, [sp, #28]
 8006fc0:	9104      	str	r1, [sp, #16]
 8006fc2:	4909      	ldr	r1, [pc, #36]	; (8006fe8 <siprintf+0x3c>)
 8006fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc8:	9105      	str	r1, [sp, #20]
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	a902      	add	r1, sp, #8
 8006fd0:	f000 f9a0 	bl	8007314 <_svfiprintf_r>
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	b01c      	add	sp, #112	; 0x70
 8006fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe0:	b003      	add	sp, #12
 8006fe2:	4770      	bx	lr
 8006fe4:	2000005c 	.word	0x2000005c
 8006fe8:	ffff0208 	.word	0xffff0208

08006fec <memset>:
 8006fec:	4402      	add	r2, r0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <memset+0xa>
 8006ff4:	4770      	bx	lr
 8006ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffa:	e7f9      	b.n	8006ff0 <memset+0x4>

08006ffc <__errno>:
 8006ffc:	4b01      	ldr	r3, [pc, #4]	; (8007004 <__errno+0x8>)
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000005c 	.word	0x2000005c

08007008 <__libc_init_array>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4d0d      	ldr	r5, [pc, #52]	; (8007040 <__libc_init_array+0x38>)
 800700c:	4c0d      	ldr	r4, [pc, #52]	; (8007044 <__libc_init_array+0x3c>)
 800700e:	1b64      	subs	r4, r4, r5
 8007010:	10a4      	asrs	r4, r4, #2
 8007012:	2600      	movs	r6, #0
 8007014:	42a6      	cmp	r6, r4
 8007016:	d109      	bne.n	800702c <__libc_init_array+0x24>
 8007018:	4d0b      	ldr	r5, [pc, #44]	; (8007048 <__libc_init_array+0x40>)
 800701a:	4c0c      	ldr	r4, [pc, #48]	; (800704c <__libc_init_array+0x44>)
 800701c:	f000 fc6a 	bl	80078f4 <_init>
 8007020:	1b64      	subs	r4, r4, r5
 8007022:	10a4      	asrs	r4, r4, #2
 8007024:	2600      	movs	r6, #0
 8007026:	42a6      	cmp	r6, r4
 8007028:	d105      	bne.n	8007036 <__libc_init_array+0x2e>
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007030:	4798      	blx	r3
 8007032:	3601      	adds	r6, #1
 8007034:	e7ee      	b.n	8007014 <__libc_init_array+0xc>
 8007036:	f855 3b04 	ldr.w	r3, [r5], #4
 800703a:	4798      	blx	r3
 800703c:	3601      	adds	r6, #1
 800703e:	e7f2      	b.n	8007026 <__libc_init_array+0x1e>
 8007040:	08007aac 	.word	0x08007aac
 8007044:	08007aac 	.word	0x08007aac
 8007048:	08007aac 	.word	0x08007aac
 800704c:	08007ab0 	.word	0x08007ab0

08007050 <__retarget_lock_acquire_recursive>:
 8007050:	4770      	bx	lr

08007052 <__retarget_lock_release_recursive>:
 8007052:	4770      	bx	lr

08007054 <memcpy>:
 8007054:	440a      	add	r2, r1
 8007056:	4291      	cmp	r1, r2
 8007058:	f100 33ff 	add.w	r3, r0, #4294967295
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	4770      	bx	lr
 8007060:	b510      	push	{r4, lr}
 8007062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706a:	4291      	cmp	r1, r2
 800706c:	d1f9      	bne.n	8007062 <memcpy+0xe>
 800706e:	bd10      	pop	{r4, pc}

08007070 <_free_r>:
 8007070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007072:	2900      	cmp	r1, #0
 8007074:	d044      	beq.n	8007100 <_free_r+0x90>
 8007076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707a:	9001      	str	r0, [sp, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f1a1 0404 	sub.w	r4, r1, #4
 8007082:	bfb8      	it	lt
 8007084:	18e4      	addlt	r4, r4, r3
 8007086:	f000 f8df 	bl	8007248 <__malloc_lock>
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <_free_r+0x94>)
 800708c:	9801      	ldr	r0, [sp, #4]
 800708e:	6813      	ldr	r3, [r2, #0]
 8007090:	b933      	cbnz	r3, 80070a0 <_free_r+0x30>
 8007092:	6063      	str	r3, [r4, #4]
 8007094:	6014      	str	r4, [r2, #0]
 8007096:	b003      	add	sp, #12
 8007098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800709c:	f000 b8da 	b.w	8007254 <__malloc_unlock>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d908      	bls.n	80070b6 <_free_r+0x46>
 80070a4:	6825      	ldr	r5, [r4, #0]
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf01      	itttt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	1949      	addeq	r1, r1, r5
 80070b2:	6021      	streq	r1, [r4, #0]
 80070b4:	e7ed      	b.n	8007092 <_free_r+0x22>
 80070b6:	461a      	mov	r2, r3
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	b10b      	cbz	r3, 80070c0 <_free_r+0x50>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d9fa      	bls.n	80070b6 <_free_r+0x46>
 80070c0:	6811      	ldr	r1, [r2, #0]
 80070c2:	1855      	adds	r5, r2, r1
 80070c4:	42a5      	cmp	r5, r4
 80070c6:	d10b      	bne.n	80070e0 <_free_r+0x70>
 80070c8:	6824      	ldr	r4, [r4, #0]
 80070ca:	4421      	add	r1, r4
 80070cc:	1854      	adds	r4, r2, r1
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	6011      	str	r1, [r2, #0]
 80070d2:	d1e0      	bne.n	8007096 <_free_r+0x26>
 80070d4:	681c      	ldr	r4, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	6053      	str	r3, [r2, #4]
 80070da:	440c      	add	r4, r1
 80070dc:	6014      	str	r4, [r2, #0]
 80070de:	e7da      	b.n	8007096 <_free_r+0x26>
 80070e0:	d902      	bls.n	80070e8 <_free_r+0x78>
 80070e2:	230c      	movs	r3, #12
 80070e4:	6003      	str	r3, [r0, #0]
 80070e6:	e7d6      	b.n	8007096 <_free_r+0x26>
 80070e8:	6825      	ldr	r5, [r4, #0]
 80070ea:	1961      	adds	r1, r4, r5
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf04      	itt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	6063      	str	r3, [r4, #4]
 80070f6:	bf04      	itt	eq
 80070f8:	1949      	addeq	r1, r1, r5
 80070fa:	6021      	streq	r1, [r4, #0]
 80070fc:	6054      	str	r4, [r2, #4]
 80070fe:	e7ca      	b.n	8007096 <_free_r+0x26>
 8007100:	b003      	add	sp, #12
 8007102:	bd30      	pop	{r4, r5, pc}
 8007104:	20004c64 	.word	0x20004c64

08007108 <sbrk_aligned>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4e0e      	ldr	r6, [pc, #56]	; (8007144 <sbrk_aligned+0x3c>)
 800710c:	460c      	mov	r4, r1
 800710e:	6831      	ldr	r1, [r6, #0]
 8007110:	4605      	mov	r5, r0
 8007112:	b911      	cbnz	r1, 800711a <sbrk_aligned+0x12>
 8007114:	f000 fba6 	bl	8007864 <_sbrk_r>
 8007118:	6030      	str	r0, [r6, #0]
 800711a:	4621      	mov	r1, r4
 800711c:	4628      	mov	r0, r5
 800711e:	f000 fba1 	bl	8007864 <_sbrk_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d00a      	beq.n	800713c <sbrk_aligned+0x34>
 8007126:	1cc4      	adds	r4, r0, #3
 8007128:	f024 0403 	bic.w	r4, r4, #3
 800712c:	42a0      	cmp	r0, r4
 800712e:	d007      	beq.n	8007140 <sbrk_aligned+0x38>
 8007130:	1a21      	subs	r1, r4, r0
 8007132:	4628      	mov	r0, r5
 8007134:	f000 fb96 	bl	8007864 <_sbrk_r>
 8007138:	3001      	adds	r0, #1
 800713a:	d101      	bne.n	8007140 <sbrk_aligned+0x38>
 800713c:	f04f 34ff 	mov.w	r4, #4294967295
 8007140:	4620      	mov	r0, r4
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	20004c68 	.word	0x20004c68

08007148 <_malloc_r>:
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800714c:	1ccd      	adds	r5, r1, #3
 800714e:	f025 0503 	bic.w	r5, r5, #3
 8007152:	3508      	adds	r5, #8
 8007154:	2d0c      	cmp	r5, #12
 8007156:	bf38      	it	cc
 8007158:	250c      	movcc	r5, #12
 800715a:	2d00      	cmp	r5, #0
 800715c:	4607      	mov	r7, r0
 800715e:	db01      	blt.n	8007164 <_malloc_r+0x1c>
 8007160:	42a9      	cmp	r1, r5
 8007162:	d905      	bls.n	8007170 <_malloc_r+0x28>
 8007164:	230c      	movs	r3, #12
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	2600      	movs	r6, #0
 800716a:	4630      	mov	r0, r6
 800716c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007244 <_malloc_r+0xfc>
 8007174:	f000 f868 	bl	8007248 <__malloc_lock>
 8007178:	f8d8 3000 	ldr.w	r3, [r8]
 800717c:	461c      	mov	r4, r3
 800717e:	bb5c      	cbnz	r4, 80071d8 <_malloc_r+0x90>
 8007180:	4629      	mov	r1, r5
 8007182:	4638      	mov	r0, r7
 8007184:	f7ff ffc0 	bl	8007108 <sbrk_aligned>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	4604      	mov	r4, r0
 800718c:	d155      	bne.n	800723a <_malloc_r+0xf2>
 800718e:	f8d8 4000 	ldr.w	r4, [r8]
 8007192:	4626      	mov	r6, r4
 8007194:	2e00      	cmp	r6, #0
 8007196:	d145      	bne.n	8007224 <_malloc_r+0xdc>
 8007198:	2c00      	cmp	r4, #0
 800719a:	d048      	beq.n	800722e <_malloc_r+0xe6>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	4631      	mov	r1, r6
 80071a0:	4638      	mov	r0, r7
 80071a2:	eb04 0903 	add.w	r9, r4, r3
 80071a6:	f000 fb5d 	bl	8007864 <_sbrk_r>
 80071aa:	4581      	cmp	r9, r0
 80071ac:	d13f      	bne.n	800722e <_malloc_r+0xe6>
 80071ae:	6821      	ldr	r1, [r4, #0]
 80071b0:	1a6d      	subs	r5, r5, r1
 80071b2:	4629      	mov	r1, r5
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7ff ffa7 	bl	8007108 <sbrk_aligned>
 80071ba:	3001      	adds	r0, #1
 80071bc:	d037      	beq.n	800722e <_malloc_r+0xe6>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	442b      	add	r3, r5
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	f8d8 3000 	ldr.w	r3, [r8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d038      	beq.n	800723e <_malloc_r+0xf6>
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	42a2      	cmp	r2, r4
 80071d0:	d12b      	bne.n	800722a <_malloc_r+0xe2>
 80071d2:	2200      	movs	r2, #0
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e00f      	b.n	80071f8 <_malloc_r+0xb0>
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	1b52      	subs	r2, r2, r5
 80071dc:	d41f      	bmi.n	800721e <_malloc_r+0xd6>
 80071de:	2a0b      	cmp	r2, #11
 80071e0:	d917      	bls.n	8007212 <_malloc_r+0xca>
 80071e2:	1961      	adds	r1, r4, r5
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	6025      	str	r5, [r4, #0]
 80071e8:	bf18      	it	ne
 80071ea:	6059      	strne	r1, [r3, #4]
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	bf08      	it	eq
 80071f0:	f8c8 1000 	streq.w	r1, [r8]
 80071f4:	5162      	str	r2, [r4, r5]
 80071f6:	604b      	str	r3, [r1, #4]
 80071f8:	4638      	mov	r0, r7
 80071fa:	f104 060b 	add.w	r6, r4, #11
 80071fe:	f000 f829 	bl	8007254 <__malloc_unlock>
 8007202:	f026 0607 	bic.w	r6, r6, #7
 8007206:	1d23      	adds	r3, r4, #4
 8007208:	1af2      	subs	r2, r6, r3
 800720a:	d0ae      	beq.n	800716a <_malloc_r+0x22>
 800720c:	1b9b      	subs	r3, r3, r6
 800720e:	50a3      	str	r3, [r4, r2]
 8007210:	e7ab      	b.n	800716a <_malloc_r+0x22>
 8007212:	42a3      	cmp	r3, r4
 8007214:	6862      	ldr	r2, [r4, #4]
 8007216:	d1dd      	bne.n	80071d4 <_malloc_r+0x8c>
 8007218:	f8c8 2000 	str.w	r2, [r8]
 800721c:	e7ec      	b.n	80071f8 <_malloc_r+0xb0>
 800721e:	4623      	mov	r3, r4
 8007220:	6864      	ldr	r4, [r4, #4]
 8007222:	e7ac      	b.n	800717e <_malloc_r+0x36>
 8007224:	4634      	mov	r4, r6
 8007226:	6876      	ldr	r6, [r6, #4]
 8007228:	e7b4      	b.n	8007194 <_malloc_r+0x4c>
 800722a:	4613      	mov	r3, r2
 800722c:	e7cc      	b.n	80071c8 <_malloc_r+0x80>
 800722e:	230c      	movs	r3, #12
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4638      	mov	r0, r7
 8007234:	f000 f80e 	bl	8007254 <__malloc_unlock>
 8007238:	e797      	b.n	800716a <_malloc_r+0x22>
 800723a:	6025      	str	r5, [r4, #0]
 800723c:	e7dc      	b.n	80071f8 <_malloc_r+0xb0>
 800723e:	605b      	str	r3, [r3, #4]
 8007240:	deff      	udf	#255	; 0xff
 8007242:	bf00      	nop
 8007244:	20004c64 	.word	0x20004c64

08007248 <__malloc_lock>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__malloc_lock+0x8>)
 800724a:	f7ff bf01 	b.w	8007050 <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	20004c60 	.word	0x20004c60

08007254 <__malloc_unlock>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__malloc_unlock+0x8>)
 8007256:	f7ff befc 	b.w	8007052 <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	20004c60 	.word	0x20004c60

08007260 <__ssputs_r>:
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	688e      	ldr	r6, [r1, #8]
 8007266:	461f      	mov	r7, r3
 8007268:	42be      	cmp	r6, r7
 800726a:	680b      	ldr	r3, [r1, #0]
 800726c:	4682      	mov	sl, r0
 800726e:	460c      	mov	r4, r1
 8007270:	4690      	mov	r8, r2
 8007272:	d82c      	bhi.n	80072ce <__ssputs_r+0x6e>
 8007274:	898a      	ldrh	r2, [r1, #12]
 8007276:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800727a:	d026      	beq.n	80072ca <__ssputs_r+0x6a>
 800727c:	6965      	ldr	r5, [r4, #20]
 800727e:	6909      	ldr	r1, [r1, #16]
 8007280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007284:	eba3 0901 	sub.w	r9, r3, r1
 8007288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800728c:	1c7b      	adds	r3, r7, #1
 800728e:	444b      	add	r3, r9
 8007290:	106d      	asrs	r5, r5, #1
 8007292:	429d      	cmp	r5, r3
 8007294:	bf38      	it	cc
 8007296:	461d      	movcc	r5, r3
 8007298:	0553      	lsls	r3, r2, #21
 800729a:	d527      	bpl.n	80072ec <__ssputs_r+0x8c>
 800729c:	4629      	mov	r1, r5
 800729e:	f7ff ff53 	bl	8007148 <_malloc_r>
 80072a2:	4606      	mov	r6, r0
 80072a4:	b360      	cbz	r0, 8007300 <__ssputs_r+0xa0>
 80072a6:	6921      	ldr	r1, [r4, #16]
 80072a8:	464a      	mov	r2, r9
 80072aa:	f7ff fed3 	bl	8007054 <memcpy>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	6126      	str	r6, [r4, #16]
 80072bc:	6165      	str	r5, [r4, #20]
 80072be:	444e      	add	r6, r9
 80072c0:	eba5 0509 	sub.w	r5, r5, r9
 80072c4:	6026      	str	r6, [r4, #0]
 80072c6:	60a5      	str	r5, [r4, #8]
 80072c8:	463e      	mov	r6, r7
 80072ca:	42be      	cmp	r6, r7
 80072cc:	d900      	bls.n	80072d0 <__ssputs_r+0x70>
 80072ce:	463e      	mov	r6, r7
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	4632      	mov	r2, r6
 80072d4:	4641      	mov	r1, r8
 80072d6:	f000 faab 	bl	8007830 <memmove>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	1b9b      	subs	r3, r3, r6
 80072de:	60a3      	str	r3, [r4, #8]
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	4433      	add	r3, r6
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2000      	movs	r0, #0
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	462a      	mov	r2, r5
 80072ee:	f000 fac9 	bl	8007884 <_realloc_r>
 80072f2:	4606      	mov	r6, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1e0      	bne.n	80072ba <__ssputs_r+0x5a>
 80072f8:	6921      	ldr	r1, [r4, #16]
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7ff feb8 	bl	8007070 <_free_r>
 8007300:	230c      	movs	r3, #12
 8007302:	f8ca 3000 	str.w	r3, [sl]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	f04f 30ff 	mov.w	r0, #4294967295
 8007312:	e7e9      	b.n	80072e8 <__ssputs_r+0x88>

08007314 <_svfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4698      	mov	r8, r3
 800731a:	898b      	ldrh	r3, [r1, #12]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	b09d      	sub	sp, #116	; 0x74
 8007320:	4607      	mov	r7, r0
 8007322:	460d      	mov	r5, r1
 8007324:	4614      	mov	r4, r2
 8007326:	d50e      	bpl.n	8007346 <_svfiprintf_r+0x32>
 8007328:	690b      	ldr	r3, [r1, #16]
 800732a:	b963      	cbnz	r3, 8007346 <_svfiprintf_r+0x32>
 800732c:	2140      	movs	r1, #64	; 0x40
 800732e:	f7ff ff0b 	bl	8007148 <_malloc_r>
 8007332:	6028      	str	r0, [r5, #0]
 8007334:	6128      	str	r0, [r5, #16]
 8007336:	b920      	cbnz	r0, 8007342 <_svfiprintf_r+0x2e>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	e0d0      	b.n	80074e4 <_svfiprintf_r+0x1d0>
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	616b      	str	r3, [r5, #20]
 8007346:	2300      	movs	r3, #0
 8007348:	9309      	str	r3, [sp, #36]	; 0x24
 800734a:	2320      	movs	r3, #32
 800734c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007350:	f8cd 800c 	str.w	r8, [sp, #12]
 8007354:	2330      	movs	r3, #48	; 0x30
 8007356:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074fc <_svfiprintf_r+0x1e8>
 800735a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735e:	f04f 0901 	mov.w	r9, #1
 8007362:	4623      	mov	r3, r4
 8007364:	469a      	mov	sl, r3
 8007366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736a:	b10a      	cbz	r2, 8007370 <_svfiprintf_r+0x5c>
 800736c:	2a25      	cmp	r2, #37	; 0x25
 800736e:	d1f9      	bne.n	8007364 <_svfiprintf_r+0x50>
 8007370:	ebba 0b04 	subs.w	fp, sl, r4
 8007374:	d00b      	beq.n	800738e <_svfiprintf_r+0x7a>
 8007376:	465b      	mov	r3, fp
 8007378:	4622      	mov	r2, r4
 800737a:	4629      	mov	r1, r5
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ff6f 	bl	8007260 <__ssputs_r>
 8007382:	3001      	adds	r0, #1
 8007384:	f000 80a9 	beq.w	80074da <_svfiprintf_r+0x1c6>
 8007388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800738a:	445a      	add	r2, fp
 800738c:	9209      	str	r2, [sp, #36]	; 0x24
 800738e:	f89a 3000 	ldrb.w	r3, [sl]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80a1 	beq.w	80074da <_svfiprintf_r+0x1c6>
 8007398:	2300      	movs	r3, #0
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a2:	f10a 0a01 	add.w	sl, sl, #1
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	9307      	str	r3, [sp, #28]
 80073aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ae:	931a      	str	r3, [sp, #104]	; 0x68
 80073b0:	4654      	mov	r4, sl
 80073b2:	2205      	movs	r2, #5
 80073b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b8:	4850      	ldr	r0, [pc, #320]	; (80074fc <_svfiprintf_r+0x1e8>)
 80073ba:	f7f8 ff19 	bl	80001f0 <memchr>
 80073be:	9a04      	ldr	r2, [sp, #16]
 80073c0:	b9d8      	cbnz	r0, 80073fa <_svfiprintf_r+0xe6>
 80073c2:	06d0      	lsls	r0, r2, #27
 80073c4:	bf44      	itt	mi
 80073c6:	2320      	movmi	r3, #32
 80073c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073cc:	0711      	lsls	r1, r2, #28
 80073ce:	bf44      	itt	mi
 80073d0:	232b      	movmi	r3, #43	; 0x2b
 80073d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d6:	f89a 3000 	ldrb.w	r3, [sl]
 80073da:	2b2a      	cmp	r3, #42	; 0x2a
 80073dc:	d015      	beq.n	800740a <_svfiprintf_r+0xf6>
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	4654      	mov	r4, sl
 80073e2:	2000      	movs	r0, #0
 80073e4:	f04f 0c0a 	mov.w	ip, #10
 80073e8:	4621      	mov	r1, r4
 80073ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ee:	3b30      	subs	r3, #48	; 0x30
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	d94d      	bls.n	8007490 <_svfiprintf_r+0x17c>
 80073f4:	b1b0      	cbz	r0, 8007424 <_svfiprintf_r+0x110>
 80073f6:	9207      	str	r2, [sp, #28]
 80073f8:	e014      	b.n	8007424 <_svfiprintf_r+0x110>
 80073fa:	eba0 0308 	sub.w	r3, r0, r8
 80073fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	46a2      	mov	sl, r4
 8007408:	e7d2      	b.n	80073b0 <_svfiprintf_r+0x9c>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	9103      	str	r1, [sp, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfbb      	ittet	lt
 8007416:	425b      	neglt	r3, r3
 8007418:	f042 0202 	orrlt.w	r2, r2, #2
 800741c:	9307      	strge	r3, [sp, #28]
 800741e:	9307      	strlt	r3, [sp, #28]
 8007420:	bfb8      	it	lt
 8007422:	9204      	strlt	r2, [sp, #16]
 8007424:	7823      	ldrb	r3, [r4, #0]
 8007426:	2b2e      	cmp	r3, #46	; 0x2e
 8007428:	d10c      	bne.n	8007444 <_svfiprintf_r+0x130>
 800742a:	7863      	ldrb	r3, [r4, #1]
 800742c:	2b2a      	cmp	r3, #42	; 0x2a
 800742e:	d134      	bne.n	800749a <_svfiprintf_r+0x186>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	1d1a      	adds	r2, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	9203      	str	r2, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfb8      	it	lt
 800743c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007440:	3402      	adds	r4, #2
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800750c <_svfiprintf_r+0x1f8>
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	2203      	movs	r2, #3
 800744c:	4650      	mov	r0, sl
 800744e:	f7f8 fecf 	bl	80001f0 <memchr>
 8007452:	b138      	cbz	r0, 8007464 <_svfiprintf_r+0x150>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	eba0 000a 	sub.w	r0, r0, sl
 800745a:	2240      	movs	r2, #64	; 0x40
 800745c:	4082      	lsls	r2, r0
 800745e:	4313      	orrs	r3, r2
 8007460:	3401      	adds	r4, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	4825      	ldr	r0, [pc, #148]	; (8007500 <_svfiprintf_r+0x1ec>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746e:	2206      	movs	r2, #6
 8007470:	f7f8 febe 	bl	80001f0 <memchr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d038      	beq.n	80074ea <_svfiprintf_r+0x1d6>
 8007478:	4b22      	ldr	r3, [pc, #136]	; (8007504 <_svfiprintf_r+0x1f0>)
 800747a:	bb1b      	cbnz	r3, 80074c4 <_svfiprintf_r+0x1b0>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	3308      	adds	r3, #8
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748a:	4433      	add	r3, r6
 800748c:	9309      	str	r3, [sp, #36]	; 0x24
 800748e:	e768      	b.n	8007362 <_svfiprintf_r+0x4e>
 8007490:	fb0c 3202 	mla	r2, ip, r2, r3
 8007494:	460c      	mov	r4, r1
 8007496:	2001      	movs	r0, #1
 8007498:	e7a6      	b.n	80073e8 <_svfiprintf_r+0xd4>
 800749a:	2300      	movs	r3, #0
 800749c:	3401      	adds	r4, #1
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0c0a 	mov.w	ip, #10
 80074a6:	4620      	mov	r0, r4
 80074a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ac:	3a30      	subs	r2, #48	; 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c6      	beq.n	8007444 <_svfiprintf_r+0x130>
 80074b6:	9105      	str	r1, [sp, #20]
 80074b8:	e7c4      	b.n	8007444 <_svfiprintf_r+0x130>
 80074ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80074be:	4604      	mov	r4, r0
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7f0      	b.n	80074a6 <_svfiprintf_r+0x192>
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	462a      	mov	r2, r5
 80074ca:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <_svfiprintf_r+0x1f4>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	4638      	mov	r0, r7
 80074d0:	f3af 8000 	nop.w
 80074d4:	1c42      	adds	r2, r0, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	d1d6      	bne.n	8007488 <_svfiprintf_r+0x174>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af2d 	bmi.w	800733c <_svfiprintf_r+0x28>
 80074e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074e4:	b01d      	add	sp, #116	; 0x74
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	ab03      	add	r3, sp, #12
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	462a      	mov	r2, r5
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <_svfiprintf_r+0x1f4>)
 80074f2:	a904      	add	r1, sp, #16
 80074f4:	4638      	mov	r0, r7
 80074f6:	f000 f879 	bl	80075ec <_printf_i>
 80074fa:	e7eb      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074fc:	08007a70 	.word	0x08007a70
 8007500:	08007a7a 	.word	0x08007a7a
 8007504:	00000000 	.word	0x00000000
 8007508:	08007261 	.word	0x08007261
 800750c:	08007a76 	.word	0x08007a76

08007510 <_printf_common>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	4616      	mov	r6, r2
 8007516:	4699      	mov	r9, r3
 8007518:	688a      	ldr	r2, [r1, #8]
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007520:	4293      	cmp	r3, r2
 8007522:	bfb8      	it	lt
 8007524:	4613      	movlt	r3, r2
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800752c:	4607      	mov	r7, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b10a      	cbz	r2, 8007536 <_printf_common+0x26>
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0699      	lsls	r1, r3, #26
 800753a:	bf42      	ittt	mi
 800753c:	6833      	ldrmi	r3, [r6, #0]
 800753e:	3302      	addmi	r3, #2
 8007540:	6033      	strmi	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	f015 0506 	ands.w	r5, r5, #6
 8007548:	d106      	bne.n	8007558 <_printf_common+0x48>
 800754a:	f104 0a19 	add.w	sl, r4, #25
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	6832      	ldr	r2, [r6, #0]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	42ab      	cmp	r3, r5
 8007556:	dc26      	bgt.n	80075a6 <_printf_common+0x96>
 8007558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800755c:	1e13      	subs	r3, r2, #0
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	bf18      	it	ne
 8007562:	2301      	movne	r3, #1
 8007564:	0692      	lsls	r2, r2, #26
 8007566:	d42b      	bmi.n	80075c0 <_printf_common+0xb0>
 8007568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800756c:	4649      	mov	r1, r9
 800756e:	4638      	mov	r0, r7
 8007570:	47c0      	blx	r8
 8007572:	3001      	adds	r0, #1
 8007574:	d01e      	beq.n	80075b4 <_printf_common+0xa4>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	f003 0306 	and.w	r3, r3, #6
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf02      	ittt	eq
 8007582:	68e5      	ldreq	r5, [r4, #12]
 8007584:	6833      	ldreq	r3, [r6, #0]
 8007586:	1aed      	subeq	r5, r5, r3
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	bf0c      	ite	eq
 800758c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007590:	2500      	movne	r5, #0
 8007592:	4293      	cmp	r3, r2
 8007594:	bfc4      	itt	gt
 8007596:	1a9b      	subgt	r3, r3, r2
 8007598:	18ed      	addgt	r5, r5, r3
 800759a:	2600      	movs	r6, #0
 800759c:	341a      	adds	r4, #26
 800759e:	42b5      	cmp	r5, r6
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xc8>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xa8>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4649      	mov	r1, r9
 80075ac:	4638      	mov	r0, r7
 80075ae:	47c0      	blx	r8
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xac>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c6      	b.n	800754e <_printf_common+0x3e>
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	2030      	movs	r0, #48	; 0x30
 80075c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ca:	4422      	add	r2, r4
 80075cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7c7      	b.n	8007568 <_printf_common+0x58>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4649      	mov	r1, r9
 80075de:	4638      	mov	r0, r7
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xa4>
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7d9      	b.n	800759e <_printf_common+0x8e>
	...

080075ec <_printf_i>:
 80075ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	7e0f      	ldrb	r7, [r1, #24]
 80075f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075f4:	2f78      	cmp	r7, #120	; 0x78
 80075f6:	4691      	mov	r9, r2
 80075f8:	4680      	mov	r8, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	469a      	mov	sl, r3
 80075fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007602:	d807      	bhi.n	8007614 <_printf_i+0x28>
 8007604:	2f62      	cmp	r7, #98	; 0x62
 8007606:	d80a      	bhi.n	800761e <_printf_i+0x32>
 8007608:	2f00      	cmp	r7, #0
 800760a:	f000 80d4 	beq.w	80077b6 <_printf_i+0x1ca>
 800760e:	2f58      	cmp	r7, #88	; 0x58
 8007610:	f000 80c0 	beq.w	8007794 <_printf_i+0x1a8>
 8007614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800761c:	e03a      	b.n	8007694 <_printf_i+0xa8>
 800761e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007622:	2b15      	cmp	r3, #21
 8007624:	d8f6      	bhi.n	8007614 <_printf_i+0x28>
 8007626:	a101      	add	r1, pc, #4	; (adr r1, 800762c <_printf_i+0x40>)
 8007628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800762c:	08007685 	.word	0x08007685
 8007630:	08007699 	.word	0x08007699
 8007634:	08007615 	.word	0x08007615
 8007638:	08007615 	.word	0x08007615
 800763c:	08007615 	.word	0x08007615
 8007640:	08007615 	.word	0x08007615
 8007644:	08007699 	.word	0x08007699
 8007648:	08007615 	.word	0x08007615
 800764c:	08007615 	.word	0x08007615
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	0800779d 	.word	0x0800779d
 800765c:	080076c5 	.word	0x080076c5
 8007660:	08007757 	.word	0x08007757
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	080077bf 	.word	0x080077bf
 8007670:	08007615 	.word	0x08007615
 8007674:	080076c5 	.word	0x080076c5
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	0800775f 	.word	0x0800775f
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	602a      	str	r2, [r5, #0]
 800768c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007694:	2301      	movs	r3, #1
 8007696:	e09f      	b.n	80077d8 <_printf_i+0x1ec>
 8007698:	6820      	ldr	r0, [r4, #0]
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	0607      	lsls	r7, r0, #24
 800769e:	f103 0104 	add.w	r1, r3, #4
 80076a2:	6029      	str	r1, [r5, #0]
 80076a4:	d501      	bpl.n	80076aa <_printf_i+0xbe>
 80076a6:	681e      	ldr	r6, [r3, #0]
 80076a8:	e003      	b.n	80076b2 <_printf_i+0xc6>
 80076aa:	0646      	lsls	r6, r0, #25
 80076ac:	d5fb      	bpl.n	80076a6 <_printf_i+0xba>
 80076ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076b2:	2e00      	cmp	r6, #0
 80076b4:	da03      	bge.n	80076be <_printf_i+0xd2>
 80076b6:	232d      	movs	r3, #45	; 0x2d
 80076b8:	4276      	negs	r6, r6
 80076ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076be:	485a      	ldr	r0, [pc, #360]	; (8007828 <_printf_i+0x23c>)
 80076c0:	230a      	movs	r3, #10
 80076c2:	e012      	b.n	80076ea <_printf_i+0xfe>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	1d19      	adds	r1, r3, #4
 80076ca:	6029      	str	r1, [r5, #0]
 80076cc:	0605      	lsls	r5, r0, #24
 80076ce:	d501      	bpl.n	80076d4 <_printf_i+0xe8>
 80076d0:	681e      	ldr	r6, [r3, #0]
 80076d2:	e002      	b.n	80076da <_printf_i+0xee>
 80076d4:	0641      	lsls	r1, r0, #25
 80076d6:	d5fb      	bpl.n	80076d0 <_printf_i+0xe4>
 80076d8:	881e      	ldrh	r6, [r3, #0]
 80076da:	4853      	ldr	r0, [pc, #332]	; (8007828 <_printf_i+0x23c>)
 80076dc:	2f6f      	cmp	r7, #111	; 0x6f
 80076de:	bf0c      	ite	eq
 80076e0:	2308      	moveq	r3, #8
 80076e2:	230a      	movne	r3, #10
 80076e4:	2100      	movs	r1, #0
 80076e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ea:	6865      	ldr	r5, [r4, #4]
 80076ec:	60a5      	str	r5, [r4, #8]
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	bfa2      	ittt	ge
 80076f2:	6821      	ldrge	r1, [r4, #0]
 80076f4:	f021 0104 	bicge.w	r1, r1, #4
 80076f8:	6021      	strge	r1, [r4, #0]
 80076fa:	b90e      	cbnz	r6, 8007700 <_printf_i+0x114>
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	d04b      	beq.n	8007798 <_printf_i+0x1ac>
 8007700:	4615      	mov	r5, r2
 8007702:	fbb6 f1f3 	udiv	r1, r6, r3
 8007706:	fb03 6711 	mls	r7, r3, r1, r6
 800770a:	5dc7      	ldrb	r7, [r0, r7]
 800770c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007710:	4637      	mov	r7, r6
 8007712:	42bb      	cmp	r3, r7
 8007714:	460e      	mov	r6, r1
 8007716:	d9f4      	bls.n	8007702 <_printf_i+0x116>
 8007718:	2b08      	cmp	r3, #8
 800771a:	d10b      	bne.n	8007734 <_printf_i+0x148>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07de      	lsls	r6, r3, #31
 8007720:	d508      	bpl.n	8007734 <_printf_i+0x148>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	6861      	ldr	r1, [r4, #4]
 8007726:	4299      	cmp	r1, r3
 8007728:	bfde      	ittt	le
 800772a:	2330      	movle	r3, #48	; 0x30
 800772c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007734:	1b52      	subs	r2, r2, r5
 8007736:	6122      	str	r2, [r4, #16]
 8007738:	f8cd a000 	str.w	sl, [sp]
 800773c:	464b      	mov	r3, r9
 800773e:	aa03      	add	r2, sp, #12
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fee4 	bl	8007510 <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	d14a      	bne.n	80077e2 <_printf_i+0x1f6>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	b004      	add	sp, #16
 8007752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f043 0320 	orr.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	4833      	ldr	r0, [pc, #204]	; (800782c <_printf_i+0x240>)
 8007760:	2778      	movs	r7, #120	; 0x78
 8007762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	6829      	ldr	r1, [r5, #0]
 800776a:	061f      	lsls	r7, r3, #24
 800776c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007770:	d402      	bmi.n	8007778 <_printf_i+0x18c>
 8007772:	065f      	lsls	r7, r3, #25
 8007774:	bf48      	it	mi
 8007776:	b2b6      	uxthmi	r6, r6
 8007778:	07df      	lsls	r7, r3, #31
 800777a:	bf48      	it	mi
 800777c:	f043 0320 	orrmi.w	r3, r3, #32
 8007780:	6029      	str	r1, [r5, #0]
 8007782:	bf48      	it	mi
 8007784:	6023      	strmi	r3, [r4, #0]
 8007786:	b91e      	cbnz	r6, 8007790 <_printf_i+0x1a4>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f023 0320 	bic.w	r3, r3, #32
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	2310      	movs	r3, #16
 8007792:	e7a7      	b.n	80076e4 <_printf_i+0xf8>
 8007794:	4824      	ldr	r0, [pc, #144]	; (8007828 <_printf_i+0x23c>)
 8007796:	e7e4      	b.n	8007762 <_printf_i+0x176>
 8007798:	4615      	mov	r5, r2
 800779a:	e7bd      	b.n	8007718 <_printf_i+0x12c>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	6826      	ldr	r6, [r4, #0]
 80077a0:	6961      	ldr	r1, [r4, #20]
 80077a2:	1d18      	adds	r0, r3, #4
 80077a4:	6028      	str	r0, [r5, #0]
 80077a6:	0635      	lsls	r5, r6, #24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0x1c4>
 80077ac:	6019      	str	r1, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0x1ca>
 80077b0:	0670      	lsls	r0, r6, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0x1c0>
 80077b4:	8019      	strh	r1, [r3, #0]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	4615      	mov	r5, r2
 80077bc:	e7bc      	b.n	8007738 <_printf_i+0x14c>
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	602a      	str	r2, [r5, #0]
 80077c4:	681d      	ldr	r5, [r3, #0]
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7f8 fd10 	bl	80001f0 <memchr>
 80077d0:	b108      	cbz	r0, 80077d6 <_printf_i+0x1ea>
 80077d2:	1b40      	subs	r0, r0, r5
 80077d4:	6060      	str	r0, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2300      	movs	r3, #0
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e0:	e7aa      	b.n	8007738 <_printf_i+0x14c>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0ad      	beq.n	800774c <_printf_i+0x160>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	d413      	bmi.n	800781e <_printf_i+0x232>
 80077f6:	68e0      	ldr	r0, [r4, #12]
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	4298      	cmp	r0, r3
 80077fc:	bfb8      	it	lt
 80077fe:	4618      	movlt	r0, r3
 8007800:	e7a6      	b.n	8007750 <_printf_i+0x164>
 8007802:	2301      	movs	r3, #1
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d09d      	beq.n	800774c <_printf_i+0x160>
 8007810:	3501      	adds	r5, #1
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	9903      	ldr	r1, [sp, #12]
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	42ab      	cmp	r3, r5
 800781a:	dcf2      	bgt.n	8007802 <_printf_i+0x216>
 800781c:	e7eb      	b.n	80077f6 <_printf_i+0x20a>
 800781e:	2500      	movs	r5, #0
 8007820:	f104 0619 	add.w	r6, r4, #25
 8007824:	e7f5      	b.n	8007812 <_printf_i+0x226>
 8007826:	bf00      	nop
 8007828:	08007a81 	.word	0x08007a81
 800782c:	08007a92 	.word	0x08007a92

08007830 <memmove>:
 8007830:	4288      	cmp	r0, r1
 8007832:	b510      	push	{r4, lr}
 8007834:	eb01 0402 	add.w	r4, r1, r2
 8007838:	d902      	bls.n	8007840 <memmove+0x10>
 800783a:	4284      	cmp	r4, r0
 800783c:	4623      	mov	r3, r4
 800783e:	d807      	bhi.n	8007850 <memmove+0x20>
 8007840:	1e43      	subs	r3, r0, #1
 8007842:	42a1      	cmp	r1, r4
 8007844:	d008      	beq.n	8007858 <memmove+0x28>
 8007846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800784a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800784e:	e7f8      	b.n	8007842 <memmove+0x12>
 8007850:	4402      	add	r2, r0
 8007852:	4601      	mov	r1, r0
 8007854:	428a      	cmp	r2, r1
 8007856:	d100      	bne.n	800785a <memmove+0x2a>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800785e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007862:	e7f7      	b.n	8007854 <memmove+0x24>

08007864 <_sbrk_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d06      	ldr	r5, [pc, #24]	; (8007880 <_sbrk_r+0x1c>)
 8007868:	2300      	movs	r3, #0
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	f7f9 fbe6 	bl	8001040 <_sbrk>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_sbrk_r+0x1a>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b103      	cbz	r3, 800787e <_sbrk_r+0x1a>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	20004c5c 	.word	0x20004c5c

08007884 <_realloc_r>:
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	4680      	mov	r8, r0
 800788a:	4614      	mov	r4, r2
 800788c:	460e      	mov	r6, r1
 800788e:	b921      	cbnz	r1, 800789a <_realloc_r+0x16>
 8007890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	4611      	mov	r1, r2
 8007896:	f7ff bc57 	b.w	8007148 <_malloc_r>
 800789a:	b92a      	cbnz	r2, 80078a8 <_realloc_r+0x24>
 800789c:	f7ff fbe8 	bl	8007070 <_free_r>
 80078a0:	4625      	mov	r5, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	f000 f81b 	bl	80078e2 <_malloc_usable_size_r>
 80078ac:	4284      	cmp	r4, r0
 80078ae:	4607      	mov	r7, r0
 80078b0:	d802      	bhi.n	80078b8 <_realloc_r+0x34>
 80078b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078b6:	d812      	bhi.n	80078de <_realloc_r+0x5a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7ff fc44 	bl	8007148 <_malloc_r>
 80078c0:	4605      	mov	r5, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0ed      	beq.n	80078a2 <_realloc_r+0x1e>
 80078c6:	42bc      	cmp	r4, r7
 80078c8:	4622      	mov	r2, r4
 80078ca:	4631      	mov	r1, r6
 80078cc:	bf28      	it	cs
 80078ce:	463a      	movcs	r2, r7
 80078d0:	f7ff fbc0 	bl	8007054 <memcpy>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4640      	mov	r0, r8
 80078d8:	f7ff fbca 	bl	8007070 <_free_r>
 80078dc:	e7e1      	b.n	80078a2 <_realloc_r+0x1e>
 80078de:	4635      	mov	r5, r6
 80078e0:	e7df      	b.n	80078a2 <_realloc_r+0x1e>

080078e2 <_malloc_usable_size_r>:
 80078e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e6:	1f18      	subs	r0, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfbc      	itt	lt
 80078ec:	580b      	ldrlt	r3, [r1, r0]
 80078ee:	18c0      	addlt	r0, r0, r3
 80078f0:	4770      	bx	lr
	...

080078f4 <_init>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr

08007900 <_fini>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr
